#!/usr/bin/python
#
# Driver script/module for rolling MadPack migrations forward or backward.
# Run with -h flag to see usage.

import yaml
import os
import sys
import argparse
import glob
import madpy
import madpy.madpack.configyml
import madpy.madpack.mkmethods
import madpy.madpack.migrations

def __get_config(conf_dir):
    return madpy.madpack.configyml.get_config(conf_dir)
def __get_mig(conf_dir, mig_dir):
    return madpy.madpack.migrations.MadPackMigration(mig_dir, conf_dir)
    
# the prep() method does two things:
# 1) if needed, create the "scripts" subdirectory to hold the 
#    migration scripts
# 2) generate a single MADPack migration script from the forward/backward
#    scripts in each of the MADlib methods specified in Config.yml
def prep(targetdir, conf_dir):
    version = madpy.madpack.configyml.get_version(madpy.__path__[0])
    if not os.path.exists(targetdir):
        os.mkdir(targetdir)
    mig = __get_mig(conf_dir,targetdir)
    conf = __get_config(conf_dir)
        
    forwards = []
    backwards = []

    for m in conf['methods']:
        # XXX  We assume here that madlib and madpy are installed side-by-side 
        # in the same directory!
        mdir = madpy.__path__[0]+'/../madlib/' + m['name'] + '/src/' + m['port'] + '/'
        try:
            install = yaml.load(open(mdir+'Install.yml'))
        except:
            print "method " + m['name'] + " misconfigured: missing Install.yml file in " + mdir
            sys.exit(2)
        try:
            install['fw'] and install['bw']
        except:
            print "method " + m['name'] + " misconfigured: Install.yml misformatted"
            sys.exit(2)
        if install['fw'] != None:
            forwards.append(mdir+install['fw'])
        if install['bw'] != None:
            backwards.append(mdir+install['bw'])
    
    # check if there's an existing script matching current version
    version = madpy.madpack.configyml.get_version(madpy.__path__[0])
    matches = glob.glob(targetdir+"/"+"".join(["[0-9]" for i in range (0,mig.mig_number_len)])+version+".py")
    if len(matches) > 0:
        print "migration files matching version " + version + " already exist: " + str(matches)
        sys.exit(2)
    fname = mig.generate(targetdir, version, forwards, backwards)

# internal function sanity checks and installs by num or version.  
def __install(scriptdir, num, version, conf_dir):
    if not os.path.isdir(scriptdir):
        print "directory " + scriptdir + " does not exist"
        exit(2)
    m = __get_mig(conf_dir,scriptdir)
    try:
        m.setup()
    except madpy.madpack.migrations.MadPackMigrationNoSchemaError:
        print "no schema named 'madlib' in database"
        exit(2)

    m.migrate(mignumber=num, migversion=version)

def install_number(scriptdir, n, conf_dir):
    __install(scriptdir,n,None,conf_dir)
    
def install_version(scriptdir, v, conf_dir):
    __install(scriptdir,None,v,conf_dir)
    
    
# uninstall is the same as install version <0
def uninstall(scriptdir, conf_dir):
    install_number(scriptdir, -1, conf_dir)
 
# parse args and invoke appropriate code.
# try running "-h" for usage info.       
def main(argv):
    parser = argparse.ArgumentParser(description='configure madlib installation', argument_default=False)
    parser.add_argument('command',
                        choices=['install','uninstall','clean','version'])
    parser.add_argument('-i', '--install_version', nargs=1, dest='install_version',
                        metavar='VERSION',
                        help="migrate to version VERSION")
    parser.add_argument('-p', '--prep-only', dest='preponly',
                        action="store_true",
                        help="prepare scripts but do not install")
    parser.add_argument('-m', '--make-only', dest='makeonly', 
                        action="store_true",
                        help="run make on methods but do not install")
    parser.add_argument('-n', '--nomake', dest='nomake', 
                        action="store_true",
                        help="do not run make scripts on methods")
    parser.add_argument('-e', '--existing', dest='installonly', 
                        action="store_true",
                        help="use existing scripts, \
                              do not generate new scripts")
    parser.add_argument('-c', '--configdir', nargs=1, dest='configdir',
                        default=[madpy.__path__[0]],
                        help="directory holding Config.yml \
                              (default "+
                              madpy.__path__[0]+")")
    parser.add_argument('-s', '--scriptdir', nargs=1, dest='scriptdir',
                        default=madpy.__path__[0] + "/config/scripts",
                        help="directory holding scripts \
                              (default "+
                              madpy.__path__[0] + "/config/scripts"
                              +")")

    args = parser.parse_args()
    conf = madpy.madpack.configyml.get_config(args.configdir[0])
    
    if args.install_version and args.command != 'install':
        print "-i or --install_version flag only compatible with 'install' command"
        exit(2)
    if args.install_version:
        instv = args.install_version[0]
    else:
        instv = None
     
    if args.command == 'version':
        v = __get_mig(args.configdir[0],mig_dir = args.scriptdir).current_version() 
        if v == -1:
            print "no version found in database"
        else:
            print v
    elif args.command == 'uninstall':
        if not os.path.exists(args.scriptdir):
            print "scripts directory missing"
            sys.exit(2)
        uninstall(args.scriptdir, args.configdir[0])
    elif args.command == 'install':
        # run make on methods unless preponly or nomake
        if not args.preponly and not args.nomake:
            madpy.madpack.mkmethods.install_methods('install', conf)
        # prep script unless version given or installonly or makeonly
        if not args.installonly and not args.makeonly and not args.install_version:        
            prep(args.scriptdir, args.configdir[0])
        # run install script unless preponly or makeonly
        if not args.preponly and not args.makeonly:
            install_version(args.scriptdir, instv, args.configdir[0])
    elif args.command == 'clean':
        madpy.madpack.mkmethods.install_methods('clean', conf)
        
if __name__ == "__main__":
    main(sys.argv[1:])
