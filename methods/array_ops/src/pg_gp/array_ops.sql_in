/* ----------------------------------------------------------------------- *//** 
 *
 * @file array_ops.sql_in
 *
 * @brief implementation of array operations in SQL
 * @date   April 2011
 *
 *
 *//* ----------------------------------------------------------------------- */

/**
@addtogroup grp_array


@about

This module provide a set of basic array operations implemented in C. It is a support module for several machine learning algorithms that
require fast array operations. At present these functions support several numeric types:

SHORTINT
INT
BIGINT
REAL
FLOAT

As of now they do not support variable size NUMERIC input. Also several of them may require NO NULL VALUES, while others omit NULLs and 
return results. Specific behavior of each is indicated in the function descriptions below.

@prereq

None.

@usage

Function: <tt>array_add('<em>anyarray</em>', '<em>anyarray</em>');
This function takes two arrays as the input and computes element wise sum, returning the resulting array. It requires that all the values are 
NON-NULL. Return type is the same as the input type.

Function: <tt>array_sub('<em>anyarray</em>', '<em>anyarray</em>');
This function takes two arrays as the input and computes element wise difference of the fist and the second, returning the resulting array. It requires that all the values are 
NON-NULL. Return type is the same as the input type.

Function: <tt>array_mult('<em>anyarray</em>', '<em>anyarray</em>');
This function takes two arrays as the input and computes element wise product, returning the resulting array. It requires that all the values are 
NON-NULL. Return type is the same as the input type.

Function: <tt>array_div('<em>anyarray</em>', '<em>anyarray</em>');
This function takes two arrays as the input and computes element wise division of element in the first array by the second, returning the resulting array. It requires that all the values are 
NON-NULL. Return type is the same as the input type.

Function: <tt>array_dot('<em>anyarray</em>', '<em>anyarray</em>');
This function takes two arrays as the input and computes dot product, returning the resulting value. It requires that all the values are 
NON-NULL. Return type is the same as the input type.

Function: <tt>array_max('<em>anyarray</em>');
This function finds the maximum value in the array. NULLs are ignored. Return type is the same as the input type.

Function: <tt>array_min('<em>anyarray</em>');
This function finds the minimum value in the array. NULLs are ignored. Return type is the same as the input type.

Function: <tt>array_sum('<em>anyarray</em>');
This function finds the sum of the values in the array. NULLs are ignored. Return type is the same as the input type.

Function: <tt>array_sum_big('<em>anyarray</em>');
This function finds the sum of the values in the array. NULLs are ignored. Return type is always FLOAT8 regardless of input. This function 
is meant to replace array_sum in the cases when sum may overflow the array type.

Function: <tt>array_mean('<em>anyarray</em>');
This function finds the mean of the values in the array. NULLs are ignored. Return type is the same as the input type.

Function: <tt>array_stddev('<em>anyarray</em>');
This function finds the standard deviation of the values in the array. NULLs are ignored. Return type is the same as the input type.

Function: <tt>array_of_float('<em>INT4</em>');
This function creates an array of set size (the argument value) of FLOAT8, initializing the values to 0.0;

Function: <tt>array_of_bigint('<em>INT4</em>');
This function creates an array of set size (the argument value) of BIGINT, initializing the values to 0;

Function: <tt>array_fill('<em>anyarray</em>', '<em>anyelement</em>');
This functions set every values in the array to some desired value (provided as the argument).

Function: <tt>array_scalar_mult('<em>anyarray</em>', '<em>anyelement</em>');
This function takes an array as the input and executes element with multiplication by the scalar provided as the second argument, returning the resulting array. It requires that all the values are NON-NULL. Return type is the same as the input type.

Function: <tt>array_sqrt('<em>anyarray</em>');
This function takes an array as the input and finds square root of each element in the array, returning the resulting array. It requires that all the values are NON-NULL. Return type is the same as the input type. This means that if the input if of the size INT, the results would also be 
rounded.

@sa file array-ops.sql_in (documenting the SQL functions)
*/

CREATE OR REPLACE FUNCTION MADLIB_SCHEMA.array_add(anyarray, anyarray) RETURNS anyarray 
AS 'MODULE_PATHNAME', 'array_add'
LANGUAGE C IMMUTABLE;

CREATE OR REPLACE FUNCTION MADLIB_SCHEMA.array_sub(anyarray, anyarray) RETURNS anyarray 
AS 'MODULE_PATHNAME', 'array_sub'
LANGUAGE C IMMUTABLE;

CREATE OR REPLACE FUNCTION MADLIB_SCHEMA.array_mult(anyarray, anyarray) RETURNS anyarray 
AS 'MODULE_PATHNAME', 'array_mult'
LANGUAGE C IMMUTABLE;

CREATE OR REPLACE FUNCTION MADLIB_SCHEMA.array_div(anyarray, anyarray) RETURNS anyarray 
AS 'MODULE_PATHNAME', 'array_div'
LANGUAGE C IMMUTABLE;

CREATE OR REPLACE FUNCTION MADLIB_SCHEMA.array_dot(anyarray, anyarray) RETURNS FLOAT8 
AS 'MODULE_PATHNAME', 'array_dot'
LANGUAGE C IMMUTABLE;

CREATE OR REPLACE FUNCTION MADLIB_SCHEMA.array_contains(anyarray, anyarray) RETURNS BOOL 
AS 'MODULE_PATHNAME', 'array_contains'
LANGUAGE C IMMUTABLE;

CREATE OR REPLACE FUNCTION MADLIB_SCHEMA.array_max(anyarray) RETURNS anyelement 
AS 'MODULE_PATHNAME', 'array_max'
LANGUAGE C IMMUTABLE;

CREATE OR REPLACE FUNCTION MADLIB_SCHEMA.array_min(anyarray) RETURNS anyelement 
AS 'MODULE_PATHNAME', 'array_min'
LANGUAGE C IMMUTABLE;

CREATE OR REPLACE FUNCTION MADLIB_SCHEMA.array_sum(anyarray) RETURNS anyelement 
AS 'MODULE_PATHNAME', 'array_sum'
LANGUAGE C IMMUTABLE;

CREATE OR REPLACE FUNCTION MADLIB_SCHEMA.array_sum_big(anyarray) RETURNS FLOAT8 
AS 'MODULE_PATHNAME', 'array_sum_big'
LANGUAGE C IMMUTABLE;

CREATE OR REPLACE FUNCTION MADLIB_SCHEMA.array_mean(anyarray) RETURNS FLOAT8 
AS 'MODULE_PATHNAME', 'array_mean'
LANGUAGE C IMMUTABLE;

CREATE OR REPLACE FUNCTION MADLIB_SCHEMA.array_stddev(anyarray) RETURNS FLOAT8 
AS 'MODULE_PATHNAME', 'array_stddev'
LANGUAGE C IMMUTABLE;

CREATE OR REPLACE FUNCTION MADLIB_SCHEMA.array_of_float(INT4) RETURNS FLOAT8[] 
AS 'MODULE_PATHNAME', 'array_of_float'
LANGUAGE C IMMUTABLE;

CREATE OR REPLACE FUNCTION MADLIB_SCHEMA.array_of_bigint(INT4) RETURNS INT8[] 
AS 'MODULE_PATHNAME', 'array_of_bigint'
LANGUAGE C IMMUTABLE;

CREATE OR REPLACE FUNCTION MADLIB_SCHEMA.array_fill(anyarray, anyelement) RETURNS anyarray 
AS 'MODULE_PATHNAME', 'array_fill'
LANGUAGE C IMMUTABLE;

CREATE OR REPLACE FUNCTION MADLIB_SCHEMA.array_scalar_mult(anyarray, anyelement) RETURNS anyarray 
AS 'MODULE_PATHNAME', 'array_scalar_mult'
LANGUAGE C IMMUTABLE;

CREATE OR REPLACE FUNCTION MADLIB_SCHEMA.array_sqrt(anyarray) RETURNS anyarray 
AS 'MODULE_PATHNAME', 'array_sqrt'
LANGUAGE C IMMUTABLE;



