#!/usr/bin/env python

import plpy

# -----------------------------------------------
# Function to run the regression algorithm
# -----------------------------------------------
def svm_regression( input_table, modelname, parallel, eta = 0.1, nu = 0.005, slambda = 0.2):
    """
    Executes the support vector regression algorithm.

    @param input_table Name of table/view containing the training data
    @param model_name Name of table under which we want to store the learned model 
    @param parallel A flag indicating whether the system should learn multiple models in parallel
    @param eta Learning rate in (0,1] (default value is 0.1)
    @param nu  Compression parameter in (0,1] associated with the fraction of training data that will become support vectors (default value is 0.005)
    @param slambda Regularisation parameter (default value is 0.2)
    
    """

    if (parallel) :
        # Learning multiple models in parallel  

        # Output error if models with the same modelname already exist
        sql = 'select count(*) from MADLIB_SCHEMA.svm_results where id = \'' + modelname + '0\'';
        seen = plpy.execute(sql);
        if (seen[0]['count'] > 0):
            plpy.error('model with name \'' + modelname + '\' already exists; please use a different model name or drop the model using svm_drop_model() function');

        # Start learning process
        sql = 'insert into MADLIB_SCHEMA.svm_results (select \'' + modelname + '\' || gp_segment_id, MADLIB_SCHEMA.svm_reg_agg(ind, label,' + str(eta) + ',' + str(nu) + ',' + str(slambda) + ') from ' + input_table + ' group by gp_segment_id)';
        plpy.execute(sql);

        # Store the models learned in a temp location
        numproc_t = plpy.execute('select count(distinct(gp_segment_id)) from ' + input_table);
        numproc = numproc_t[0]['count'];
        plpy.execute('select MADLIB_SCHEMA.svm_storeModel(\'' + modelname + '\', ' + str(numproc) + ')');     
    else :
        # Learning a single model

        # Output error if a model with the same modelname already exists
        sql = 'select count(*) from MADLIB_SCHEMA.svm_results where id = \'' + modelname + '\'';
        seen = plpy.execute(sql);
        if (seen[0]['count'] > 0):
            plpy.error('model with name \'' + modelname + '\' already exists; please use a different model name or drop the model using svm_drop_model() function');
        
        # Start learning process    
        sql = 'insert into MADLIB_SCHEMA.svm_results (select \'' + modelname + '\', MADLIB_SCHEMA.svm_reg_agg(ind, label,' + str(eta) + ',' + str(nu) + ',' + str(slambda) + ') from ' + input_table + ')';
        plpy.execute(sql);
        # Store the model learned in a temp location
        plpy.execute('select MADLIB_SCHEMA.svm_storeModel(\'' + modelname + '\')');

    # Store the model learned in table specified by user
    if parallel:
        where_cond = "position('" + modelname + "' in id) > 0 AND '" + modelname + "' <> id";
    else:
        where_cond = "id = '" + modelname + "'";

    plpy.execute('drop table if exists ' + modelname);
    plpy.execute('create table ' + modelname + ' ( id text, weight float8, sv float8[] )');
    plpy.execute("insert into " + modelname + " (select * from MADLIB_SCHEMA.svm_model where " + where_cond + " )");

    # Retrieve and return the summary for each model learned    
    summary = plpy.execute("select id, (model).inds, (model).cum_err, (model).epsilon, (model).b, (model).nsvs from MADLIB_SCHEMA.svm_results where " + where_cond);

    result = [];
    for i in range(0,summary.nrows()):
        result = result + [(modelname, summary[i]['id'], summary[i]['inds'], summary[i]['cum_err'], summary[i]['epsilon'], summary[i]['b'], summary[i]['nsvs'])];

    # Clean up temp storage of models
    plpy.execute("delete from MADLIB_SCHEMA.svm_model where " + where_cond);
    plpy.execute("delete from MADLIB_SCHEMA.svm_results where " + where_cond);

    return result;

# -----------------------------------------------
# Function to run the classification algorithm
# -----------------------------------------------
def svm_classification( input_table, modelname, parallel, eta=0.1, nu=0.005):
    """
    Executes the support vector classification algorithm.

    @param input_table Name of table/view containing the training data
    @param model_name Name under which we want to store the learned model 
    @param parallel A flag indicating whether the system should learn multiple models in parallel
    @param eta Learning rate in (0,1] (default value is 0.1)
    @param nu Compression parameter in (0,1] associated with the fraction of training data that will become support vectors (default value is 0.005)
    
    """

    if (parallel) :
        # Learning multiple models in parallel  

        # Output error if models with the same modelname already exist
        sql = 'select count(*) from MADLIB_SCHEMA.svm_results where id = \'' + modelname + '0\'';
        seen = plpy.execute(sql);
        if (seen[0]['count'] > 0):
            plpy.error('model with name \'' + modelname + '\' already exists; please use a different model name or drop the model using svm_drop_model() function');

        # Start learning process
        sql = 'insert into MADLIB_SCHEMA.svm_results (select \'' + modelname + '\' || gp_segment_id, MADLIB_SCHEMA.svm_cls_agg(ind, label,' + str(eta) + ',' + str(nu) + ') from ' + input_table + ' group by gp_segment_id)';
        plpy.execute(sql);

        # Store the models learned in a temp location
        numproc_t = plpy.execute('select count(distinct(gp_segment_id)) from ' + input_table);
        numproc = numproc_t[0]['count'];
        plpy.execute('select MADLIB_SCHEMA.svm_storeModel(\'' + modelname + '\', ' + str(numproc) + ')');     
    else :
        # Learning a single model

        # Output error if a model with the same modelname already exists
        sql = 'select count(*) from MADLIB_SCHEMA.svm_results where id = \'' + modelname + '\'';
        seen = plpy.execute(sql);
        if (seen[0]['count'] > 0):
            plpy.error('model with name \'' + modelname + '\' already exists; please use a different model name or drop the model using svm_drop_model() function');
        
        # Start learning process    
        sql = 'insert into MADLIB_SCHEMA.svm_results (select \'' + modelname + '\', MADLIB_SCHEMA.svm_cls_agg(ind, label,' + str(eta) + ',' + str(nu) + ') from ' + input_table + ')';
        plpy.execute(sql);

        # Store the model learned in a temp location
        plpy.execute('select MADLIB_SCHEMA.svm_storeModel(\'' + modelname + '\')');

    # Store the model learned in table specified by user
    if parallel:
        where_cond = "position('" + modelname + "' in id) > 0 AND '" + modelname + "' <> id";
    else:
        where_cond = "id = '" + modelname + "'";

    plpy.execute('drop table if exists ' + modelname);
    plpy.execute('create table ' + modelname + ' ( id text, weight float8, sv float8[] )');
    plpy.execute("insert into " + modelname + " (select * from MADLIB_SCHEMA.svm_model where " + where_cond + " )");

    # Retrieve and return the summary for each model learned    
    summary = plpy.execute("select id, (model).inds, (model).cum_err, (model).rho, (model).b, (model).nsvs from MADLIB_SCHEMA.svm_results where " + where_cond);

    result = [];
    for i in range(0,summary.nrows()):
        result = result + [(modelname, summary[i]['id'], summary[i]['inds'], summary[i]['cum_err'], summary[i]['rho'], summary[i]['b'], summary[i]['nsvs'])];

    # Clean up the temp storage of models
    plpy.execute("delete from MADLIB_SCHEMA.svm_model where " + where_cond);
    plpy.execute("delete from MADLIB_SCHEMA.svm_results where " + where_cond);

    return result;

# -----------------------------------------------
# Function to run the novelty detection algorithm
# -----------------------------------------------
def svm_novelty_detection( input_table, modelname, parallel, eta = 0.1, nu = 0.01):
    """
    Executes the support vector novelty detection algorithm.

    @param input_table Name of table/view containing the training data
    @param model_name Name of table under which we want to store the learned model 
    @param parallel A flag indicating whether the system should learn multiple models in parallel.
    @param eta Learning rate in (0,1] (default value is 0.1)
    @param nu Compression parameter in (0,1] associated with the fraction of training data that will become support vectors (default value is 0.01)
    """

    if (parallel) :
        # Learning multiple models in parallel  

        # Output error if models with the same modelname already exist
        sql = 'select count(*) from MADLIB_SCHEMA.svm_results where id = \'' + modelname + '0\'';
        seen = plpy.execute(sql);
        if (seen[0]['count'] > 0):
            plpy.error('model with name \'' + modelname + '\' already exists; please use a different model name or drop the model using svm_drop_model() function');

        # Start learning process
        sql = 'insert into MADLIB_SCHEMA.svm_results (select \'' + modelname + '\' || gp_segment_id, MADLIB_SCHEMA.svm_nd_agg(ind,' + str(eta) + ',' + str(nu) + ') from ' + input_table + ' group by gp_segment_id)';
        plpy.execute(sql);

        # Store the models learned in a temp location
        numproc_t = plpy.execute('select count(distinct(gp_segment_id)) from ' + input_table);
        numproc = numproc_t[0]['count'];
        plpy.execute('select MADLIB_SCHEMA.svm_storeModel(\'' + modelname + '\', ' + str(numproc) + ')');     
    else :
        # Learning a single model

        # Output error if a model with the same modelname already exists
        sql = 'select count(*) from MADLIB_SCHEMA.svm_results where id = \'' + modelname + '\'';
        seen = plpy.execute(sql);
        if (seen[0]['count'] > 0):
            plpy.error('model with name \'' + modelname + '\' already exists; please use a different model name or drop the model using svm_drop_model() function');
        
        # Start learning process    
        sql = 'insert into MADLIB_SCHEMA.svm_results (select \'' + modelname + '\', MADLIB_SCHEMA.svm_nd_agg(ind,' + str(eta) + ',' + str(nu) + ') from ' + input_table + ')';
        plpy.execute(sql);

        # Store the model learned in a temp location
        plpy.execute('select MADLIB_SCHEMA.svm_storeModel(\'' + modelname + '\')');

    # Store the model learned in table specified by user
    if parallel:
        where_cond = "position('" + modelname + "' in id) > 0 AND '" + modelname + "' <> id";
    else:
        where_cond = "id = '" + modelname + "'";

    plpy.execute('drop table if exists ' + modelname);
    plpy.execute('create table ' + modelname + ' ( id text, weight float8, sv float8[] )');
    plpy.execute("insert into " + modelname + " (select * from MADLIB_SCHEMA.svm_model where " + where_cond + " )");

    # Retrieve and return the summary for each model learned    
    summary = plpy.execute("select id, (model).inds, (model).rho, (model).nsvs from MADLIB_SCHEMA.svm_results where " + where_cond);

    result = [];
    for i in range(0,summary.nrows()):
        result = result + [(modelname, summary[i]['id'], summary[i]['inds'], summary[i]['rho'], summary[i]['nsvs'])];

    # Clean up the temp storage of models
    plpy.execute("delete from MADLIB_SCHEMA.svm_model where " + where_cond);
    plpy.execute("delete from MADLIB_SCHEMA.svm_results where " + where_cond);

    return result;

# ---------------------------------------------------
# Function to predict the labels of points in a table
# ---------------------------------------------------
def svm_predict( input_table, col_name, modelname, output_table, parallel):
    """
    Scores the data points stored in a table using a learned support vector model.

    @param input_table Name of table/view containing the data points to be scored
    @param col_name Name of column in input_table containing the data points
    @param model_name Name under which we want to store the learned model 
    @param output_table Name of table to store the results 
    @param parallel A flag indicating whether the system should learn multiple models in parallel.
    
    """

    plpy.error('this function currently does not work');
    
    plpy.execute('drop table if exists ' + output_table);
    plpy.execute('create table ' + output_table + ' ( id int, prediction float8 )');

    if (parallel) :
        num_models_t = plpy.execute('SELECT COUNT(DISTINCT(id)) n FROM MADLIB_SCHEMA.svm_model WHERE position(\'' + modelname + '\' in id) > 0 AND \'' + modelname + '\' <> id;');
        num_models = num_models_t[0]['n'];

        sql = 'insert into ' + output_table + '(select t.id, sum(weight * MADLIB_SCHEMA.svm_kernel(m.sv, t.' + col_name + ')) / ' + str(num_models) + ' from MADLIB_SCHEMA.svm_model m, ' + input_table + ' t where position(\'' + modelname + '\' in m.id) > 0 AND \'' + modelname + '\' <> m.id group by 1)';
        plpy.execute(sql);

    else :
        sql = 'insert into ' + output_table + '(select t.id, sum(weight * MADLIB_SCHEMA.svm_kernel(m.sv, t.' + col_name + ')) from MADLIB_SCHEMA.svm_model m, ' + input_table + ' t where m.id = \'' + modelname + '\' group by 1)';
        plpy.execute(sql);

    return '''Finished processing data points in %s table; results are stored in %s table. 
           ''' % (input_table,output_table)

