\i sketches.sql
CREATE SCHEMA madlib;
psql:sketches.sql:1: ERROR:  schema "madlib" already exists
DROP FUNCTION IF EXISTS madlib.big_or(bitmap1 bytea, bitmap2 bytea) CASCADE;
CREATE FUNCTION madlib.big_or(bitmap1 bytea, bitmap2 bytea)
RETURNS bytea
AS '$libdir/sketches'
LANGUAGE C STRICT;
DROP FUNCTION IF EXISTS madlib.fmsketch_trans(bitmaps bytea, input anyelement) CASCADE;
psql:sketches.sql:9: NOTICE:  drop cascades to function madlib.fmcount(anyelement)
CREATE FUNCTION madlib.fmsketch_trans(bitmaps bytea, input anyelement) 
RETURNS bytea 
AS '$libdir/sketches'
LANGUAGE C STRICT;
DROP FUNCTION IF EXISTS madlib.fmsketch_getcount(bitmaps bytea) CASCADE;
CREATE FUNCTION madlib.fmsketch_getcount(bitmaps bytea) 
RETURNS int8 
AS '$libdir/sketches'
LANGUAGE C STRICT;
DROP FUNCTION IF EXISTS madlib.fmsketch_merge(bitmaps1 bytea, bitmaps2 bytea) CASCADE;
CREATE FUNCTION madlib.fmsketch_merge(bitmaps1 bytea, bitmaps2 bytea) 
RETURNS bytea 
AS '$libdir/sketches'
LANGUAGE C STRICT;
DROP AGGREGATE IF EXISTS madlib.fmcount(anyelement);
psql:sketches.sql:27: NOTICE:  aggregate madlib.fmcount(anyelement) does not exist, skipping
CREATE AGGREGATE madlib.fmcount(anyelement)
(
    sfunc = madlib.fmsketch_trans,
    stype = bytea, 
    finalfunc = madlib.fmsketch_getcount,
--  UNCOMMENT THE NEXT LINE TO PARALLELIZE ON GREENPLUM
--    prefunc = madlib.fmsketch_merge,
    initcond = '' 
);
DROP FUNCTION IF EXISTS madlib.cmsketch_trans(bytea, int8) CASCADE;
psql:sketches.sql:38: NOTICE:  drop cascades to function madlib.cmsketch(bigint)
CREATE FUNCTION madlib.cmsketch_trans(bitmaps bytea, input int8) 
RETURNS bytea 
AS '$libdir/sketches'
LANGUAGE C STRICT;
DROP FUNCTION IF EXISTS madlib.cmsketch_out(bytea) CASCADE;
CREATE FUNCTION madlib.cmsketch_out(counters bytea) 
RETURNS bytea 
AS '$libdir/sketches'
LANGUAGE C STRICT;
DROP FUNCTION IF EXISTS madlib.cmsketch_combine(bytea, bytea) CASCADE;
CREATE FUNCTION madlib.cmsketch_combine(bytea, bytea) 
RETURNS bytea
AS '$libdir/sketches'
LANGUAGE C STRICT;
DROP AGGREGATE IF EXISTS madlib.cmsketch(int8);
psql:sketches.sql:56: NOTICE:  aggregate madlib.cmsketch(int8) does not exist, skipping
CREATE AGGREGATE madlib.cmsketch(int8)
(
    sfunc = madlib.cmsketch_trans,
    stype = bytea, 
    finalfunc = madlib.cmsketch_out,
    initcond = ''
--  UNCOMMENT THE NEXT LINE TO PARALLELIZE ON GREENPLUM
--    , prefunc = madlib.cmsketch_combine
);
DROP FUNCTION IF EXISTS madlib.cmsketch_getcount(bytea, int8) CASCADE;
CREATE FUNCTION madlib.cmsketch_getcount(counters bytea, val int8) 
RETURNS int8 
AS '$libdir/sketches'
LANGUAGE C STRICT;
DROP FUNCTION IF EXISTS madlib.cmsketch_rangecount(bytea, int8, int8) CASCADE;
CREATE FUNCTION madlib.cmsketch_rangecount(bytea, int8, int8)
RETURNS int8
AS '$libdir/sketches'
LANGUAGE C STRICT;
DROP FUNCTION IF EXISTS madlib.cmsketch_centile(bytea, int4) CASCADE;
CREATE FUNCTION madlib.cmsketch_centile(bytea, int4)
RETURNS int8
AS '$libdir/sketches'
LANGUAGE C STRICT;
DROP FUNCTION IF EXISTS madlib.cmsketch_width_histogram(bytea, int8, int8, int4) CASCADE;
CREATE FUNCTION madlib.cmsketch_width_histogram(bytea, int8, int8, int4)
RETURNS int8[]
AS '$libdir/sketches'
LANGUAGE C STRICT;
DROP FUNCTION IF EXISTS madlib.cmsketch_depth_histogram(bytea, int4) CASCADE;
CREATE FUNCTION madlib.cmsketch_depth_histogram(bytea, int4)
RETURNS int8[]
AS '$libdir/sketches'
LANGUAGE C STRICT;
DROP FUNCTION IF EXISTS madlib.mfvsketch_trans(bytea, anyelement, int4) CASCADE;
psql:sketches.sql:97: NOTICE:  drop cascades to function madlib.frequent_values(anyelement,integer)
CREATE FUNCTION madlib.mfvsketch_trans(bytea, anyelement, int4)
RETURNS bytea
AS '$libdir/sketches'
LANGUAGE C STRICT;
DROP FUNCTION IF EXISTS madlib.mfvsketch_out(bytea) CASCADE;
CREATE FUNCTION madlib.mfvsketch_out(bytea)
RETURNS text
AS '$libdir/sketches'
LANGUAGE C STRICT;
DROP AGGREGATE IF EXISTS madlib.frequent_values(anyelement, int4);
psql:sketches.sql:109: NOTICE:  aggregate madlib.frequent_values(anyelement,int4) does not exist, skipping
CREATE AGGREGATE madlib.frequent_values(anyelement, int4)
(
    sfunc = madlib.mfvsketch_trans,
    stype = bytea, 
    finalfunc = madlib.mfvsketch_out,
    initcond = ''
--  UNCOMMENT THE NEXT LINE TO PARALLELIZE ON GREENPLUM
--    , prefunc = madlib.mfvsketch_combine
);
set search_path to "$user",public,madlib;
-- Basic methods
select cmsketch_getcount(cmsketch(i),5) from generate_series(1,10000) as T(i);
 cmsketch_getcount 
-------------------
                10
(1 row)

select cmsketch_rangecount(cmsketch(i),1,1025) from generate_series(1,10000) as T(i);
 cmsketch_rangecount 
---------------------
                1033
(1 row)

select cmsketch_rangecount(cmsketch(i), 1,200) from generate_series(1,10000) as R(i);
 cmsketch_rangecount 
---------------------
                 213
(1 row)

select cmsketch_width_histogram(cmsketch(i), min(i), max(i), 4) from generate_series(1,10000) as R(i);
                            cmsketch_width_histogram                            
--------------------------------------------------------------------------------
 [0:3][0:2]={{1,2500,2511},{2501,5000,2515},{5001,7500,2516},{7501,10000,2516}}
(1 row)

select mini,
       cmsketch_centile(sketch, 25) AS quartile1, 
       cmsketch_centile(sketch, 50) AS quartile2, 
       cmsketch_centile(sketch, 75) AS quartile3,
       maxi 
  from (select min(i) as mini, cmsketch(i) as sketch, max(i) as maxi 
          from generate_series(1,10000) as R(i)) as T;
 mini | quartile1 | quartile2 | quartile3 | maxi  
------+-----------+-----------+-----------+-------
    1 |      2494 |      4994 |      7494 | 10000
(1 row)

select cmsketch_depth_histogram(cmsketch(i), 4) from generate_series(1,10000) as R(i);
                                            cmsketch_depth_histogram                                             
-----------------------------------------------------------------------------------------------------------------
 [0:3][0:2]={{-4611686018427387904,2494,2506},{2495,4994,2515},{4995,7494,2520},{7495,4611686018427387903,2511}}
(1 row)

-- tests for all-NULL column
select cmsketch(NULL) from generate_series(1,10000) as R(i) where i < 0;
 cmsketch 
----------
 
(1 row)

select cmsketch_centile(cmsketch(NULL), 2) from generate_series(1,10000) as R(i) where i < 0;
 cmsketch_centile 
------------------
                 
(1 row)

