\i sketches.sql
CREATE SCHEMA madlib;
psql:sketches.sql:1: ERROR:  schema "madlib" already exists
DROP FUNCTION IF EXISTS madlib.big_or(bitmap1 bytea, bitmap2 bytea) CASCADE;
CREATE FUNCTION madlib.big_or(bitmap1 bytea, bitmap2 bytea)
RETURNS bytea
AS '$libdir/sketches'
LANGUAGE C STRICT;
DROP FUNCTION IF EXISTS madlib.fmsketch_trans(bitmaps bytea, input anyelement) CASCADE;
psql:sketches.sql:9: NOTICE:  drop cascades to function madlib.fmcount(anyelement)
CREATE FUNCTION madlib.fmsketch_trans(bitmaps bytea, input anyelement) 
RETURNS bytea 
AS '$libdir/sketches'
LANGUAGE C STRICT;
DROP FUNCTION IF EXISTS madlib.fmsketch_getcount(bitmaps bytea) CASCADE;
CREATE FUNCTION madlib.fmsketch_getcount(bitmaps bytea) 
RETURNS int8 
AS '$libdir/sketches'
LANGUAGE C STRICT;
DROP FUNCTION IF EXISTS madlib.fmsketch_merge(bitmaps1 bytea, bitmaps2 bytea) CASCADE;
CREATE FUNCTION madlib.fmsketch_merge(bitmaps1 bytea, bitmaps2 bytea) 
RETURNS bytea 
AS '$libdir/sketches'
LANGUAGE C STRICT;
DROP AGGREGATE IF EXISTS madlib.fmcount(anyelement);
psql:sketches.sql:27: NOTICE:  aggregate madlib.fmcount(anyelement) does not exist, skipping
CREATE AGGREGATE madlib.fmcount(anyelement)
(
    sfunc = madlib.fmsketch_trans,
    stype = bytea, 
    finalfunc = madlib.fmsketch_getcount,
--  UNCOMMENT THE NEXT LINE TO PARALLELIZE ON GREENPLUM
--    prefunc = madlib.fmsketch_merge,
    initcond = '' 
);
DROP FUNCTION IF EXISTS madlib.cmsketch_trans(bytea, int8) CASCADE;
psql:sketches.sql:38: NOTICE:  drop cascades to function madlib.cmsketch(bigint)
CREATE FUNCTION madlib.cmsketch_trans(bitmaps bytea, input int8) 
RETURNS bytea 
AS '$libdir/sketches'
LANGUAGE C STRICT;
DROP FUNCTION IF EXISTS madlib.cmsketch_out(bytea) CASCADE;
CREATE FUNCTION madlib.cmsketch_out(counters bytea) 
RETURNS bytea 
AS '$libdir/sketches'
LANGUAGE C STRICT;
DROP FUNCTION IF EXISTS madlib.cmsketch_combine(bytea, bytea) CASCADE;
CREATE FUNCTION madlib.cmsketch_combine(bytea, bytea) 
RETURNS bytea
AS '$libdir/sketches'
LANGUAGE C STRICT;
DROP AGGREGATE IF EXISTS madlib.cmsketch(int8);
psql:sketches.sql:56: NOTICE:  aggregate madlib.cmsketch(int8) does not exist, skipping
CREATE AGGREGATE madlib.cmsketch(int8)
(
    sfunc = madlib.cmsketch_trans,
    stype = bytea, 
    finalfunc = madlib.cmsketch_out,
    initcond = ''
--  UNCOMMENT THE NEXT LINE TO PARALLELIZE ON GREENPLUM
--    , prefunc = madlib.cmsketch_combine
);
DROP FUNCTION IF EXISTS madlib.cmsketch_getcount(bytea, int8) CASCADE;
CREATE FUNCTION madlib.cmsketch_getcount(counters bytea, val int8) 
RETURNS int8 
AS '$libdir/sketches'
LANGUAGE C STRICT;
DROP FUNCTION IF EXISTS madlib.cmsketch_rangecount(bytea, int8, int8) CASCADE;
CREATE FUNCTION madlib.cmsketch_rangecount(bytea, int8, int8)
RETURNS int8
AS '$libdir/sketches'
LANGUAGE C STRICT;
DROP FUNCTION IF EXISTS madlib.cmsketch_centile(bytea, int4) CASCADE;
CREATE FUNCTION madlib.cmsketch_centile(bytea, int4)
RETURNS int8
AS '$libdir/sketches'
LANGUAGE C STRICT;
DROP FUNCTION IF EXISTS madlib.cmsketch_width_histogram(bytea, int8, int8, int4) CASCADE;
CREATE FUNCTION madlib.cmsketch_width_histogram(bytea, int8, int8, int4)
RETURNS int8[]
AS '$libdir/sketches'
LANGUAGE C STRICT;
DROP FUNCTION IF EXISTS madlib.cmsketch_depth_histogram(bytea, int4) CASCADE;
CREATE FUNCTION madlib.cmsketch_depth_histogram(bytea, int4)
RETURNS int8[]
AS '$libdir/sketches'
LANGUAGE C STRICT;
DROP FUNCTION IF EXISTS madlib.mfvsketch_trans(bytea, anyelement, int4) CASCADE;
psql:sketches.sql:97: NOTICE:  drop cascades to function madlib.frequent_values(anyelement,integer)
CREATE FUNCTION madlib.mfvsketch_trans(bytea, anyelement, int4)
RETURNS bytea
AS '$libdir/sketches'
LANGUAGE C STRICT;
DROP FUNCTION IF EXISTS madlib.mfvsketch_out(bytea) CASCADE;
CREATE FUNCTION madlib.mfvsketch_out(bytea)
RETURNS text
AS '$libdir/sketches'
LANGUAGE C STRICT;
DROP AGGREGATE IF EXISTS madlib.frequent_values(anyelement, int4);
psql:sketches.sql:109: NOTICE:  aggregate madlib.frequent_values(anyelement,int4) does not exist, skipping
CREATE AGGREGATE madlib.frequent_values(anyelement, int4)
(
    sfunc = madlib.mfvsketch_trans,
    stype = bytea, 
    finalfunc = madlib.mfvsketch_out,
    initcond = ''
--  UNCOMMENT THE NEXT LINE TO PARALLELIZE ON GREENPLUM
--    , prefunc = madlib.mfvsketch_combine
);
set search_path to "$user",public,madlib;
-- Basic methods
select frequent_values(i,5) 
  from (select * from generate_series(1,100) union all select * from generate_series(10,15)) as T(i);
             frequent_values             
-----------------------------------------
 [10: 2] [11: 2] [12: 2] [13: 2] [14: 2]
(1 row)

select frequent_values(substring(name from '^.*/'), 9) from pg_timezone_names;
                                                            frequent_values                                                            
---------------------------------------------------------------------------------------------------------------------------------------
 [America/: 133] [Asia/: 88] [Europe/: 58] [Africa/: 53] [Pacific/: 40] [Etc/: 35] [Australia/: 23] [US/: 13] [America/Argentina/: 13]
(1 row)

select frequent_values(NULL::bytea,5) from generate_series(1,100);
 frequent_values 
-----------------
 
(1 row)

