-- CREATE SCHEMA madlib;

DROP FUNCTION IF EXISTS MADLIB_SCHEMA.big_or(bitmap1 bytea, bitmap2 bytea) CASCADE;
CREATE FUNCTION MADLIB_SCHEMA.big_or(bitmap1 bytea, bitmap2 bytea)
RETURNS bytea
AS 'MODULE_PATHNAME'
LANGUAGE C STRICT;

DROP FUNCTION IF EXISTS MADLIB_SCHEMA.fmsketch_trans(bitmaps bytea, input anyelement) CASCADE;
CREATE FUNCTION MADLIB_SCHEMA.fmsketch_trans(bitmaps bytea, input anyelement) 
RETURNS bytea 
AS 'MODULE_PATHNAME'
LANGUAGE C STRICT;

DROP FUNCTION IF EXISTS MADLIB_SCHEMA.fmsketch_getcount(bitmaps bytea) CASCADE;
CREATE FUNCTION MADLIB_SCHEMA.fmsketch_getcount(bitmaps bytea) 
RETURNS int8 
AS 'MODULE_PATHNAME'
LANGUAGE C STRICT;

DROP FUNCTION IF EXISTS MADLIB_SCHEMA.fmsketch_merge(bitmaps1 bytea, bitmaps2 bytea) CASCADE;
CREATE FUNCTION MADLIB_SCHEMA.fmsketch_merge(bitmaps1 bytea, bitmaps2 bytea) 
RETURNS bytea 
AS 'MODULE_PATHNAME'
LANGUAGE C STRICT;

DROP AGGREGATE IF EXISTS MADLIB_SCHEMA.fmcount(anyelement);
CREATE AGGREGATE MADLIB_SCHEMA.fmcount(anyelement)
(
    sfunc = MADLIB_SCHEMA.fmsketch_trans,
    stype = bytea, 
    finalfunc = MADLIB_SCHEMA.fmsketch_getcount,
--  UNCOMMENT THE NEXT LINE TO PARALLELIZE ON GREENPLUM
--    prefunc = MADLIB_SCHEMA.fmsketch_merge,
    initcond = '' 
);

DROP FUNCTION IF EXISTS MADLIB_SCHEMA.cmsketch_trans(bytea, int8) CASCADE;
CREATE FUNCTION MADLIB_SCHEMA.cmsketch_trans(bitmaps bytea, input int8) 
RETURNS bytea 
AS 'MODULE_PATHNAME'
LANGUAGE C STRICT;

DROP FUNCTION IF EXISTS MADLIB_SCHEMA.cmsketch_out(bytea) CASCADE;
CREATE FUNCTION MADLIB_SCHEMA.cmsketch_out(counters bytea) 
RETURNS bytea 
AS 'MODULE_PATHNAME'
LANGUAGE C STRICT;

DROP FUNCTION IF EXISTS MADLIB_SCHEMA.cmsketch_combine(bytea, bytea) CASCADE;
CREATE FUNCTION MADLIB_SCHEMA.cmsketch_combine(bytea, bytea) 
RETURNS bytea
AS 'MODULE_PATHNAME'
LANGUAGE C STRICT;

DROP AGGREGATE IF EXISTS MADLIB_SCHEMA.cmsketch(int8);
CREATE AGGREGATE MADLIB_SCHEMA.cmsketch(int8)
(
    sfunc = MADLIB_SCHEMA.cmsketch_trans,
    stype = bytea, 
    finalfunc = MADLIB_SCHEMA.cmsketch_out,
    initcond = ''
--  UNCOMMENT THE NEXT LINE TO PARALLELIZE ON GREENPLUM
--    , prefunc = MADLIB_SCHEMA.cmsketch_combine
);

DROP FUNCTION IF EXISTS MADLIB_SCHEMA.cmsketch_getcount(bytea, int8) CASCADE;
CREATE FUNCTION MADLIB_SCHEMA.cmsketch_getcount(counters bytea, val int8) 
RETURNS int8 
AS 'MODULE_PATHNAME'
LANGUAGE C STRICT;

DROP FUNCTION IF EXISTS MADLIB_SCHEMA.cmsketch_rangecount(bytea, int8, int8) CASCADE;
CREATE FUNCTION MADLIB_SCHEMA.cmsketch_rangecount(bytea, int8, int8)
RETURNS int8
AS 'MODULE_PATHNAME'
LANGUAGE C STRICT;

DROP FUNCTION IF EXISTS MADLIB_SCHEMA.cmsketch_centile(bytea, int4) CASCADE;
CREATE FUNCTION MADLIB_SCHEMA.cmsketch_centile(bytea, int4)
RETURNS int8
AS 'MODULE_PATHNAME'
LANGUAGE C STRICT;

DROP FUNCTION IF EXISTS MADLIB_SCHEMA.cmsketch_width_histogram(bytea, int8, int8, int4) CASCADE;
CREATE FUNCTION MADLIB_SCHEMA.cmsketch_width_histogram(bytea, int8, int8, int4)
RETURNS int8[]
AS 'MODULE_PATHNAME'
LANGUAGE C STRICT;

DROP FUNCTION IF EXISTS MADLIB_SCHEMA.cmsketch_depth_histogram(bytea, int4) CASCADE;
CREATE FUNCTION MADLIB_SCHEMA.cmsketch_depth_histogram(bytea, int4)
RETURNS int8[]
AS 'MODULE_PATHNAME'
LANGUAGE C STRICT;

DROP FUNCTION IF EXISTS MADLIB_SCHEMA.mfvsketch_trans(bytea, anyelement, int4) CASCADE;
CREATE FUNCTION MADLIB_SCHEMA.mfvsketch_trans(bytea, anyelement, int4)
RETURNS bytea
AS 'MODULE_PATHNAME'
LANGUAGE C STRICT;

DROP FUNCTION IF EXISTS MADLIB_SCHEMA.mfvsketch_out(bytea) CASCADE;
CREATE FUNCTION MADLIB_SCHEMA.mfvsketch_out(bytea)
RETURNS text
AS 'MODULE_PATHNAME'
LANGUAGE C STRICT;

DROP AGGREGATE IF EXISTS MADLIB_SCHEMA.frequent_values(anyelement, int4);
CREATE AGGREGATE MADLIB_SCHEMA.frequent_values(anyelement, int4)
(
    sfunc = MADLIB_SCHEMA.mfvsketch_trans,
    stype = bytea, 
    finalfunc = MADLIB_SCHEMA.mfvsketch_out,
    initcond = ''
--  UNCOMMENT THE NEXT LINE TO PARALLELIZE ON GREENPLUM
--    , prefunc = MADLIB_SCHEMA.mfvsketch_combine
);