SET dynamic_library_path TO '@libdir@';
-- Installation of all functions
\i multLinRegression.sql
CREATE SCHEMA madlib;
-- State transition function
CREATE FUNCTION madlib.float8_mregr_accum(DOUBLE PRECISION[], DOUBLE PRECISION, DOUBLE PRECISION[])
RETURNS DOUBLE PRECISION[]
AS 'multLinRegression'
LANGUAGE C
IMMUTABLE STRICT;
-- Function for merging two transition states
CREATE OR REPLACE FUNCTION madlib.float8_mregr_combine(DOUBLE PRECISION[], DOUBLE PRECISION[])
RETURNS DOUBLE PRECISION[]
AS 'multLinRegression'
LANGUAGE C
IMMUTABLE STRICT;
-- Final functions
CREATE FUNCTION madlib.float8_mregr_coef(DOUBLE PRECISION[])
RETURNS DOUBLE PRECISION[]
AS 'multLinRegression'
LANGUAGE C STRICT;
CREATE FUNCTION madlib.float8_mregr_r2(DOUBLE PRECISION[])
RETURNS DOUBLE PRECISION
AS 'multLinRegression'
LANGUAGE C STRICT;
CREATE FUNCTION madlib.float8_mregr_tstats(DOUBLE PRECISION[])
RETURNS DOUBLE PRECISION[]
AS 'multLinRegression'
LANGUAGE C STRICT;
CREATE FUNCTION madlib.float8_mregr_pvalues(DOUBLE PRECISION[])
RETURNS DOUBLE PRECISION[]
AS 'multLinRegression'
LANGUAGE C STRICT;
-- No warning message while creating aggregates. (PREFUNC is a Greenplum-only
-- attribute)
SET client_min_messages = error;
CREATE AGGREGATE madlib.mregr_coef(DOUBLE PRECISION, DOUBLE PRECISION[]) (
	SFUNC=madlib.float8_mregr_accum,
	STYPE=float8[],
	FINALFUNC=madlib.float8_mregr_coef,
	PREFUNC=madlib.float8_mregr_combine,
	INITCOND='{0}'
);
CREATE AGGREGATE madlib.mregr_r2(DOUBLE PRECISION, DOUBLE PRECISION[]) (
	SFUNC=madlib.float8_mregr_accum,
	STYPE=float8[],
	FINALFUNC=madlib.float8_mregr_r2,
	PREFUNC=madlib.float8_mregr_combine,
	INITCOND='{0}'
);
CREATE AGGREGATE madlib.mregr_tstats(DOUBLE PRECISION, DOUBLE PRECISION[]) (
	SFUNC=madlib.float8_mregr_accum,
	STYPE=float8[],
	FINALFUNC=madlib.float8_mregr_tstats,
	PREFUNC=madlib.float8_mregr_combine,
	INITCOND='{0}'
);
CREATE AGGREGATE madlib.mregr_pvalues(DOUBLE PRECISION, DOUBLE PRECISION[]) (
	SFUNC=madlib.float8_mregr_accum,
	STYPE=float8[],
	FINALFUNC=madlib.float8_mregr_pvalues,
	PREFUNC=madlib.float8_mregr_combine,
	INITCOND='{0}'
);
RESET client_min_messages;
CREATE FUNCTION madlib.student_t_cdf(INTEGER, DOUBLE PRECISION)
RETURNS DOUBLE PRECISION
AS 'multLinRegression'
LANGUAGE C
IMMUTABLE STRICT;
-- Create examples
\i sql/createExamples.sql
CREATE SCHEMA madlib_examples;
SET search_path TO madlib_examples;
-- The following example is taken from:
-- http://www.weibull.com/DOEWeb/estimating_regression_models_using_least_squares.htm#Example%205.1
-- http://www.weibull.com/DOEWeb/hypothesis_tests_in_multiple_linear_regression.htm#Example%205.3
-- No notice message while creating table (creating implicit index).
SET client_min_messages = error;
CREATE TABLE weibull
(
	id INTEGER NOT NULL,
	x1 DOUBLE PRECISION,
	x2 DOUBLE PRECISION,
	y DOUBLE PRECISION,
	CONSTRAINT pk_weibull PRIMARY KEY (id)
);
RESET client_min_messages;
COPY weibull (id, x1, x2, y) FROM stdin;
-- The following example is taken from:
-- http://biocomp.health.unm.edu/biomed505/Course/Cheminformatics/advanced/
-- data_classification_qsar/linear_multilinear_regression.pdf
SET client_min_messages = error;
CREATE TABLE unm
(
	id INTEGER NOT NULL,
	x1 DOUBLE PRECISION,
	x2 DOUBLE PRECISION,
	y DOUBLE PRECISION,
	CONSTRAINT pk_unm PRIMARY KEY (id)
);
RESET client_min_messages;
COPY unm (id, x1, x2, y) FROM stdin;
-- The following example is taken from:
-- http://www.stat.columbia.edu/~martin/W2110/SAS_7.pdf
SET client_min_messages = error;
CREATE TABLE houses
(
	id SERIAL NOT NULL,
	tax INTEGER,
	bedroom REAL,
	bath REAL,
	price INTEGER,
	size INTEGER,
	lot INTEGER,
	CONSTRAINT pk_houses PRIMARY KEY (id)
);
RESET client_min_messages;
COPY houses (tax, bedroom, bath, price, size, lot) FROM stdin;
SET search_path TO madlib_examples;
-- Test examples
-- We convert to real in order to round to fewer significant digits. Otherwise,
-- different platform might produce slightly different results for the least
-- significant digits, depending on the implementation of internal library
-- functions.
select madlib.mregr_coef(y, array[1, x1, x2])::REAL[] from weibull;
         mregr_coef         
----------------------------
 {-153.512,1.23872,12.0824}
(1 row)

select madlib.mregr_r2(y, array[1, x1, x2])::REAL from weibull;
 mregr_r2 
----------
 0.968022
(1 row)

select madlib.mregr_tstats(y, array[1, x1, x2])::REAL[] from weibull;
       mregr_tstats        
---------------------------
 {-1.52173,3.13926,3.0726}
(1 row)

select madlib.mregr_pvalues(y, array[1, x1, x2])::REAL[] from weibull;
          mregr_pvalues          
---------------------------------
 {0.15034,0.00724458,0.00827039}
(1 row)

select madlib.mregr_coef(y, array[1, x1, x2])::REAL[] from unm;
        mregr_coef         
---------------------------
 {9.68916,2.08219,1.48797}
(1 row)

select madlib.mregr_r2(y, array[1, x1, x2])::REAL from unm;
 mregr_r2 
----------
 0.995297
(1 row)

select madlib.mregr_tstats(y, array[1, x1, x2])::REAL[] from unm;
       mregr_tstats        
---------------------------
 {51.1557,4.00982,2.42545}
(1 row)

select madlib.mregr_pvalues(y, array[1, x1, x2])::REAL[] from unm;
           mregr_pvalues           
-----------------------------------
 {1.64509e-05,0.0278292,0.0937108}
(1 row)

select madlib.mregr_coef(price, array[1, bedroom, bath, size])::REAL[] from houses;
             mregr_coef             
------------------------------------
 {27923.4,-35524.8,2269.34,130.794}
(1 row)

select madlib.mregr_r2(price, array[1, bedroom, bath, size])::REAL from houses;
 mregr_r2 
----------
 0.745374
(1 row)

select madlib.mregr_tstats(price, array[1, bedroom, bath, size])::REAL[] from houses;
             mregr_tstats             
--------------------------------------
 {0.495919,-1.41891,0.102183,3.61223}
(1 row)

select madlib.mregr_pvalues(price, array[1, bedroom, bath, size])::REAL[] from houses;
              mregr_pvalues              
-----------------------------------------
 {0.629711,0.183633,0.920451,0.00408159}
(1 row)

-- Test student_t_cdf with both normal and spurious input
select madlib.student_t_cdf(NULL, 0)::REAL;
 student_t_cdf 
---------------
              
(1 row)

select madlib.student_t_cdf(-10, NULL)::REAL;
 student_t_cdf 
---------------
              
(1 row)

select madlib.student_t_cdf(NULL, NULL)::REAL;
 student_t_cdf 
---------------
              
(1 row)

select madlib.student_t_cdf(NULL, 12)::REAL;
 student_t_cdf 
---------------
              
(1 row)

select madlib.student_t_cdf(0, 0)::REAL;
 student_t_cdf 
---------------
              
(1 row)

select madlib.student_t_cdf(-2, 1000000)::REAL;
 student_t_cdf 
---------------
              
(1 row)

select madlib.student_t_cdf(0, -2)::REAL;
 student_t_cdf 
---------------
              
(1 row)

select madlib.student_t_cdf(1, -2000)::REAL;
 student_t_cdf 
---------------
   0.000159155
(1 row)

select madlib.student_t_cdf(2, 2)::REAL;
 student_t_cdf 
---------------
      0.908248
(1 row)

select madlib.student_t_cdf(2, -2)::REAL;
 student_t_cdf 
---------------
     0.0917517
(1 row)

select madlib.student_t_cdf(10, 0.25)::REAL;
 student_t_cdf 
---------------
      0.596176
(1 row)

select madlib.student_t_cdf(2147483647, 1.79e308)::REAL;
 student_t_cdf 
---------------
             1
(1 row)

select madlib.student_t_cdf(-2147483648, 0.000000000001)::REAL;
 student_t_cdf 
---------------
              
(1 row)

select madlib.student_t_cdf(1, 2000)::REAL - (1./2 + 1/pi() * atan(2000))::REAL AS shouldBeZero;
 shouldbezero 
--------------
            0
(1 row)

select madlib.student_t_cdf(2,-3)::REAL - (1./2 * (1. + (-3.)/sqrt(2. + pow(-3, 2))))::REAL AS shouldBeZero;
 shouldbezero 
--------------
            0
(1 row)

