SET dynamic_library_path TO '@libdir@';

-- create madlib schema for PGXS regression test

CREATE SCHEMA madlib;

CREATE LANGUAGE plpythonu;

-- Installation of all functions

\i naiveBayesClassification.sql

SELECT madlib.init_python_paths();


-- Create examples

\i sql/createExamples.sql

SET search_path TO madlib_examples;


-- Create database objects

-- Preprocess training data: Precompute feature probabilities and class priors
SET client_min_messages = error;
SELECT madlib.create_nb_prepared_data_tables('bayes', 'class', 'attributes', 3, 'nb_feature_probs', 'nb_class_priors');
RESET client_min_messages;

-- Classify the features in table 'toclassify' using preprocessed training data
SELECT madlib.create_nb_classify_view('nb_feature_probs', 'nb_class_priors', 'toclassify', 'id', 'attributes', 3, 'nb_classify_view_fast');

-- Classify the features in table 'toclassify' without preprocessed training data
SELECT madlib.create_nb_classify_view('bayes', 'class', 'attributes', 'toclassify', 'id', 'attributes', 3, 'nb_classify_view_slow');

-- Compute all class probabilities for the features in table 'toclassify' using
-- preprocessed training data
SELECT madlib.create_nb_probs_view('nb_feature_probs', 'nb_class_priors', 'toclassify', 'id', 'attributes', 3, 'nb_probs_view_fast');

-- Compute all class probabilities for the features in table 'toclassify' without
-- preprocessed training data
SELECT madlib.create_nb_probs_view('bayes', 'class', 'attributes', 'toclassify', 'id', 'attributes', 3, 'nb_probs_view_slow');

-- Create a classify function nb_classify_fast: Attributes -> Classes, using
-- preprocessed training data
SELECT madlib.create_nb_classify_fn('nb_feature_probs', 'nb_class_priors', 3, 'nb_classify_fast');

-- Create a classify function nb_classify_slow: Attributes -> Classes, without
-- preprocessed training data
SELECT madlib.create_nb_classify_fn('bayes', 'class', 'attributes', 3, 'nb_classify_slow');

-- Create intermediate views as needed for Naive Bayes implementation inherited from Greenplum
CREATE VIEW class_example_unpivot AS
SELECT
	id,
	'C' || class AS class,
	unnest(array['A1', 'A2', 'A3']) AS attr,
	unnest(attributes) AS value
FROM bayes;

CREATE TABLE class_example_nb_training AS
SELECT
	attr,
	value,
	madlib.pivot_sum(array['C1', 'C2'], class, 1::BIGINT) AS class_count
FROM
	class_example_unpivot
GROUP BY attr, value;
--DISTRIBUTED by (attr);

CREATE VIEW class_example_nb_classify AS
SELECT
	attr,
	value,
	class_count,
	array['C1', 'C2'] AS classes,
	madlib.sum(class_count) OVER (wa)::INTEGER[] AS class_total,
	attr_count

	--	PostgreSQL does not support DISTINCT to be used within the function argument list
	--	http://www.postgresql.org/docs/9/interactive/sql-expressions.html#SYNTAX-WINDOW-FUNCTIONS
	--  so we cannot use the following (taken from the Greenplum Admin Guide)
	--	count(DISTINCT value) OVER (wa) AS attr_count
	--
	--  However, Greenplum does not support correlated subquery. So we cannot just use
	--  a subquery like
	--  ( SELECT count(DISTINCT value) FROM class_example_nb_training AS sub WHERE
	--    sub.attr = training.attr FROM class_example_nb_training AS training )
	--  either. We need to flatten the subquery manualy.

FROM
	class_example_nb_training AS training
	
	--  Self-join for the aforementioned resons...
	INNER JOIN
	(
		SELECT
			attr,
			count(DISTINCT value) as attr_count
		FROM class_example_nb_training AS sub
		GROUP BY attr
	) AS attr_count
	USING (attr)

WINDOW wa AS (PARTITION BY attr);

-- Now test created objects

SELECT * FROM nb_feature_probs ORDER BY class, attr, value;

SELECT * FROM nb_class_priors ORDER BY class;

SELECT * FROM nb_classify_view_fast ORDER BY key;

SELECT * FROM nb_classify_view_slow ORDER BY key;

SELECT * FROM nb_probs_view_fast ORDER BY key, class;

SELECT * FROM nb_probs_view_slow ORDER BY key, class;

SELECT *, nb_classify_fast(attributes, 1) FROM toclassify ORDER BY id;

SELECT *, nb_classify_slow(attributes, 0) FROM toclassify ORDER BY id;

SELECT
	classify.id,
	classify.attributes,
	madlib.nb_classify(classes, attr_count, class_count, class_total) AS class,
	madlib.nb_probabilities(classes, attr_count, class_count, class_total) AS probabilities
FROM
	(
		SELECT
			id,
			attributes,
			'A' || attr AS attr,
			attributes[attr] AS value
		FROM
			toclassify,
			generate_series(1, 3) AS attr
	) AS classify
	LEFT OUTER JOIN
	class_example_nb_classify AS prep
	USING (attr, value)
GROUP BY
	classify.id, classify.attributes;
