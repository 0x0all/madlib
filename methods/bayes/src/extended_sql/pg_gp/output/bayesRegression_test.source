SET dynamic_library_path TO '@libdir@';
-- Installation of all functions
\i bayes.sql
CREATE SCHEMA madlib;
CREATE LANGUAGE plpythonu;
-- In the following, we implement an argmax function where the "index set" is
-- INTEGER and we range over DOUBLE PRECISION values.
-- argmax should only be used on unsorted data because it will not exploit
-- indices, and its running time is Theta(n).
-- The implementation is in SQL, with a flavor of functional programming.
-- The hope is that the optimizer does a good job here.
CREATE TYPE madlib.ARGS_AND_VALUE_DOUBLE AS (
	args INTEGER[],
	value DOUBLE PRECISION
);
CREATE FUNCTION madlib.argmax_transition(
	oldmax madlib.ARGS_AND_VALUE_DOUBLE,
	newkey INTEGER,
	newvalue DOUBLE PRECISION)
RETURNS madlib.ARGS_AND_VALUE_DOUBLE AS
$$
	SELECT CASE WHEN $3 < $1.value OR $2 IS NULL OR ($3 IS NULL AND NOT $1.value IS NULL) THEN $1
				WHEN $3 = $1.value OR ($3 IS NULL AND $1.value IS NULL AND NOT $1.args IS NULL)
					THEN ($1.args || $2, $3)::madlib.ARGS_AND_VALUE_DOUBLE
				ELSE (array[$2], $3)::madlib.ARGS_AND_VALUE_DOUBLE
		   END
$$
LANGUAGE sql IMMUTABLE;
CREATE FUNCTION madlib.argmax_combine(
	max1 madlib.ARGS_AND_VALUE_DOUBLE, max2 madlib.ARGS_AND_VALUE_DOUBLE)
RETURNS madlib.ARGS_AND_VALUE_DOUBLE AS
$$
	-- If SQL guaranteed short-circuit evaluation, the following could become
	-- shorter. Unfortunately, this is not the case.
	-- Section 6.3.3.3 of ISO/IEC 9075-1:2008 Framework (SQL/Framework):
	--
	--  "However, it is implementation-dependent whether expressions are
	--   actually evaluated left to right, particularly when operands or
	--   operators might cause conditions to be raised or if the results of the
	--   expressions can be determined without completely evaluating all parts
	--   of the expression."
	--
	-- Again, the optimizer does its job hopefully.
	SELECT CASE WHEN $1 IS NULL THEN $2
				WHEN $2 IS NULL THEN $1
				WHEN ($1.value = $2.value) OR ($1.value IS NULL AND $2.value IS NULL)
					THEN ($1.args || $2.args, $1.value)::madlib.ARGS_AND_VALUE_DOUBLE
				WHEN $1.value IS NULL OR $1.value < $2.value THEN $2
				ELSE $1
		   END
$$
LANGUAGE sql IMMUTABLE;
CREATE FUNCTION madlib.argmax_final(finalstate madlib.ARGS_AND_VALUE_DOUBLE)
RETURNS INTEGER[] AS
$$
	SELECT $1.args
$$
LANGUAGE sql IMMUTABLE;
-- No warning message while creating aggregates. (PREFUNC is a Greenplum-only
-- attribute)
SET client_min_messages = error;
CREATE AGGREGATE madlib.argmax(INTEGER, DOUBLE PRECISION) (
	SFUNC=madlib.argmax_transition,
	STYPE=madlib.ARGS_AND_VALUE_DOUBLE,
	PREFUNC=madlib.argmax_combine,
	FINALFUNC=madlib.argmax_final
);
RESET client_min_messages;
CREATE FUNCTION madlib.create_nb_prepared_data_tables(
	"trainingSource" VARCHAR,
	"trainingClassColumn" VARCHAR,
	"trainingAttrColumn" VARCHAR,
	"numAttrs" INTEGER,
	"featureProbsDestName" VARCHAR,
	"classPriorsDestName" VARCHAR)
RETURNS VOID AS $$
	import bayes
	global whatToCreate

	whatToCreate = 'TABLE'
	bayes.create_prepared_data(**globals())
$$ LANGUAGE plpythonu VOLATILE;
CREATE FUNCTION madlib.create_nb_classify_view(
	"featureProbsSource" VARCHAR,
	"classPriorsSource" VARCHAR,
	"classifySource" VARCHAR,
	"classifyKeyColumn" VARCHAR,
	"classifyAttrColumn" VARCHAR,
	"numAttrs" INTEGER,
	"destName" VARCHAR)
RETURNS VOID AS $$
	import bayes
	global whatToCreate
	
	whatToCreate = 'VIEW'
	bayes.create_classification(**globals())
$$ LANGUAGE plpythonu VOLATILE;
CREATE FUNCTION madlib.create_nb_classify_view(
	"trainingSource" VARCHAR,
	"trainingClassColumn" VARCHAR,
	"trainingAttrColumn" VARCHAR,
	"classifySource" VARCHAR,
	"classifyKeyColumn" VARCHAR,
	"classifyAttrColumn" VARCHAR,
	"numAttrs" INTEGER,
	"destName" VARCHAR)
RETURNS VOID AS $$
	import bayes
	global whatToCreate
	
	whatToCreate = 'VIEW'
	bayes.create_classification(**globals())
$$ LANGUAGE plpythonu VOLATILE;
CREATE FUNCTION madlib.create_nb_probs_view(
	"trainingSource" VARCHAR,
	"trainingClassColumn" VARCHAR,
	"trainingAttrColumn" VARCHAR,
	"classifySource" VARCHAR,
	"classifyKeyColumn" VARCHAR,
	"classifyAttrColumn" VARCHAR,
	"numAttrs" INTEGER,
	"destName" VARCHAR)
RETURNS VOID AS $$
	import bayes
	global whatToCreate
	
	whatToCreate = 'VIEW'
	bayes.create_bayes_probabilities(**globals())
$$ LANGUAGE plpythonu VOLATILE;
CREATE FUNCTION madlib.create_nb_probs_view(
	"featureProbsSource" VARCHAR,
	"classPriorsSource" VARCHAR,
	"classifySource" VARCHAR,
	"classifyKeyColumn" VARCHAR,
	"classifyAttrColumn" VARCHAR,
	"numAttrs" INTEGER,
	"destName" VARCHAR)
RETURNS VOID AS $$
	import bayes
	global whatToCreate
	
	whatToCreate = 'VIEW'
	bayes.create_bayes_probabilities(**globals())
$$ LANGUAGE plpythonu VOLATILE;
CREATE FUNCTION madlib.create_nb_classify_fn(
	"featureProbsSource" VARCHAR,
	"classPriorsSource" VARCHAR,
	"numAttrs" INTEGER,
	"destName" VARCHAR)
RETURNS VOID AS $$
	import bayes
	bayes.create_classification_function(**globals())
$$ LANGUAGE plpythonu VOLATILE;
CREATE FUNCTION madlib.create_nb_classify_fn(
	"trainingSource" VARCHAR,
	"trainingClassColumn" VARCHAR,
	"trainingAttrColumn" VARCHAR,
	"numAttrs" INTEGER,
	"destName" VARCHAR)
RETURNS VOID AS $$
	import bayes
	bayes.create_classification_function(**globals())
$$ LANGUAGE plpythonu VOLATILE;
CREATE FUNCTION madlib.update_nb_classification(
	"featureProbsSource" VARCHAR,
	"classPriorsSource" VARCHAR,
	"numAttrs" INTEGER,
	"destName" VARCHAR,
	"classifyAttrColumn" VARCHAR,
	"destColumn" VARCHAR)
RETURNS VOID AS $$
	import bayes
	bayes.update_classification(**globals())
$$ LANGUAGE plpythonu VOLATILE;
CREATE FUNCTION madlib.init_python_paths()
RETURNS VOID AS
$$
	# FIXME: The following code should of course not reside in a specialized
	# module such as bayes.sql
	import sys

	dyld_paths = plpy.execute(
		"SHOW dynamic_library_path")[0]["dynamic_library_path"].split(':')
	before_default = True
	count = 0
	for path in dyld_paths:
		if path == "$libdir":
			before_default = False
		else:
			if before_default:
				sys.path.insert(count, path)
				count += 1
			else:
				sys.path.append(path)
$$ LANGUAGE plpythonu VOLATILE;
SELECT madlib.init_python_paths();
 init_python_paths 
-------------------
 
(1 row)

-- Create examples
\i sql/createExamples.sql
CREATE SCHEMA madlib_examples;
SET search_path TO madlib_examples;
-- The following is taken from the Greenplum Admin Guide
-- No notice message while creating table (creating implicit index).
SET client_min_messages = error;
CREATE TABLE bayes
(
	id integer NOT NULL,
	class INTEGER,
	attributes INTEGER[],
	CONSTRAINT pk_bayes PRIMARY KEY (id)
);
RESET client_min_messages;
COPY bayes (id, class, attributes) FROM stdin;
SET client_min_messages = error;
CREATE TABLE toclassify
(
	id SERIAL NOT NULL,
	attributes INTEGER[],
	CONSTRAINT pk_toclassify PRIMARY KEY (id)
);
RESET client_min_messages;
COPY toclassify (attributes) FROM stdin;
SET search_path TO madlib_examples;
-- Create database objects
-- Preprocess training data: Precompute feature probabilities and class priors
SELECT madlib.create_nb_prepared_data_tables('bayes', 'class', 'attributes', 3, 'nb_feature_probs', 'nb_class_priors');
 create_nb_prepared_data_tables 
--------------------------------
 
(1 row)

-- Classify the features in table 'toclassify' using preprocessed training data
SELECT madlib.create_nb_classify_view('nb_feature_probs', 'nb_class_priors', 'toclassify', 'id', 'attributes', 3, 'nb_classify_view_fast');
 create_nb_classify_view 
-------------------------
 
(1 row)

-- Classify the features in table 'toclassify' without preprocessed training data
SELECT madlib.create_nb_classify_view('bayes', 'class', 'attributes', 'toclassify', 'id', 'attributes', 3, 'nb_classify_view_slow');
 create_nb_classify_view 
-------------------------
 
(1 row)

-- Compute all class probabilities for the features in table 'toclassify' using
-- preprocessed training data
SELECT madlib.create_nb_probs_view('nb_feature_probs', 'nb_class_priors', 'toclassify', 'id', 'attributes', 3, 'nb_probs_view_fast');
 create_nb_probs_view 
----------------------
 
(1 row)

-- Compute all class probabilities for the features in table 'toclassify' without
-- preprocessed training data
SELECT madlib.create_nb_probs_view('bayes', 'class', 'attributes', 'toclassify', 'id', 'attributes', 3, 'nb_probs_view_slow');
 create_nb_probs_view 
----------------------
 
(1 row)

-- Create a classify function nb_classify_fast: Attributes -> Classes, using
-- preprocessed training data
SELECT madlib.create_nb_classify_fn('nb_feature_probs', 'nb_class_priors', 3, 'nb_classify_fast');
 create_nb_classify_fn 
-----------------------
 
(1 row)

-- Create a classify function nb_classify_slow: Attributes -> Classes, without
-- preprocessed training data
SELECT madlib.create_nb_classify_fn('bayes', 'class', 'attributes', 3, 'nb_classify_slow');
 create_nb_classify_fn 
-----------------------
 
(1 row)

-- Create a new table like toclassify but extended by a column 'classes'
SET client_min_messages = error;
CREATE TABLE classified (LIKE toclassify INCLUDING ALL, classification INTEGER[]);
RESET client_min_messages;
INSERT INTO classified (id, attributes)
SELECT * FROM toclassify;
SELECT madlib.update_nb_classification('nb_feature_probs', 'nb_class_priors', 3, 'classified', 'attributes', 'classification');
 update_nb_classification 
--------------------------
 
(1 row)

-- Now test created objects
SELECT * FROM nb_feature_probs ORDER BY class, attr, value;
 class | attr | value |  log_feature_prob  
-------+------+-------+--------------------
     1 |    1 |     1 |                  0
     1 |    2 |     2 | -0.176091259055681
     1 |    2 |     4 | -0.477121254719662
     1 |    3 |     1 | -0.477121254719662
     1 |    3 |     3 | -0.176091259055681
     2 |    1 |     0 | -0.176091259055681
     2 |    1 |     1 | -0.477121254719662
     2 |    2 |     1 | -0.477121254719662
     2 |    2 |     2 | -0.176091259055681
     2 |    3 |     2 | -0.176091259055681
     2 |    3 |     3 | -0.477121254719662
(11 rows)

SELECT * FROM nb_class_priors ORDER BY class;
 class | class_cnt | all_cnt 
-------+-----------+---------
     1 |         3 |       6
     2 |         3 |       6
(2 rows)

SELECT * FROM nb_classify_view_fast ORDER BY key;
 key | nb_classification | nb_log_probability 
-----+-------------------+--------------------
   1 | {1,2}             |                   
   2 | {1}               | -0.653212513775344
(2 rows)

SELECT * FROM nb_classify_view_slow ORDER BY key;
 key | nb_classification | nb_log_probability 
-----+-------------------+--------------------
   1 | {1,2}             |                   
   2 | {1}               | -0.653212513775344
(2 rows)

SELECT * FROM nb_probs_view_fast ORDER BY key, class;
 key | class |      nb_prob      
-----+-------+-------------------
   1 |     1 |                  
   1 |     2 |                  
   2 |     1 | 0.857142857142857
   2 |     2 | 0.142857142857143
(4 rows)

SELECT * FROM nb_probs_view_slow ORDER BY key, class;
 key | class |      nb_prob      
-----+-------+-------------------
   1 |     1 |                  
   1 |     2 |                  
   2 |     1 | 0.857142857142857
   2 |     2 | 0.142857142857143
(4 rows)

SELECT *, nb_classify_fast(attributes) FROM toclassify ORDER BY id;
 id | attributes | nb_classify_fast 
----+------------+------------------
  1 | {0,2,1}    | {2,1}
  2 | {1,2,3}    | {1}
(2 rows)

SELECT *, nb_classify_slow(attributes) FROM toclassify ORDER BY id;
 id | attributes | nb_classify_slow 
----+------------+------------------
  1 | {0,2,1}    | {1,2}
  2 | {1,2,3}    | {1}
(2 rows)

SELECT * FROM classified ORDER BY id;
 id | attributes | classification 
----+------------+----------------
  1 | {0,2,1}    | {2,1}
  2 | {1,2,3}    | {1}
(2 rows)

