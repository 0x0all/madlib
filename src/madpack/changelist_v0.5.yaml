# Changelist for MADlib version 0.5 to 0.6

# Modules added in the 0.6
new module:
    validation:
    lda:
    elastic_net:
    summary:
    # Treat regress as new module for simplicity because of big changes in V0.6
    #regress:

# Changes in the types (UDT) defined in MADlib v0.6
#   - c: changes in existing UDT
#   - i: newly added UDT
udt:
    #lda_result: i
    #summary_result: i
    #__elastic_net_result: i
    heteroskedasticity_test_result: i
    __logregr_result: i
    __utils_scaled_data: i
    __utils_scales: i
    logregr_result: c
    logregr_result: c
    plda_topics_t: c
    plda_word_distrn: c
    plda_word_weight: c

# Functions (UDF) removed from v0.5
# Overloaded functions should be separately mentioned
# example:
#   - compute_logregr:
#           rettype: integer
#           argument: source character varying, depColumn character varying, indepColumn character varying, maxNumIterations integer, optimizer character varying, "precision" double precision
udf:
    - compute_logregr:
         rettype: integer
         argument: source character varying, depColumn character varying, indepColumn character varying, maxNumIterations integer, optimizer character varying, "precision" double precision
    - internal_logregr_cg_result:
         rettype: schema_madlib.logregr_result
         argument: double precision[]
    - internal_logregr_cg_step_distance:
         rettype: double precision
         argument: double precision[], double precision[]
    - internal_logregr_igd_result:
         rettype: schema_madlib.logregr_result
         argument: double precision[]
    - internal_logregr_igd_step_distance:
         rettype: double precision
         argument: double precision[], double precision[]
    - internal_logregr_irls_result:
         rettype: schema_madlib.logregr_result
         argument: double precision[]
    - internal_logregr_irls_step_distance:
         rettype: double precision
         argument: double precision[], double precision[]
    - logregr:
         rettype: schema_madlib.logregr_result
         argument: source character varying, depColumn character varying, indepColumn character varying
    - logregr:
         rettype: schema_madlib.logregr_result
         argument: source character varying, depColumn character varying, indepColumn character varying, maxNumIterations integer
    - logregr:
         rettype: schema_madlib.logregr_result
         argument: source character varying, depColumn character varying, indepColumn character varying, maxNumIterations integer, optimizer character varying
    - logregr:
         rettype: schema_madlib.logregr_result
         argument: source character varying, depColumn character varying, indepColumn character varying, maxNumIterations integer, optimizer character varying, "precision" double precision
    - logregr_cg_step_final:
         rettype: double precision[]
         argument: state double precision[]
    - logregr_cg_step_merge_states:
         rettype: double precision[]
         argument: state1 double precision[], state2 double precision[]
    - logregr_cg_step_transition:
         rettype: double precision[]
         argument: double precision[], boolean, double precision[], double precision[]
    - logregr_igd_step_final:
         rettype: double precision[]
         argument: state double precision[]
    - logregr_igd_step_merge_states:
         rettype: double precision[]
         argument: state1 double precision[], state2 double precision[]
    - logregr_igd_step_transition:
         rettype: double precision[]
         argument: double precision[], boolean, double precision[], double precision[]
    - logregr_irls_step_final:
         rettype: double precision[]
         argument: state double precision[]
    - logregr_irls_step_merge_states:
         rettype: double precision[]
         argument: state1 double precision[], state2 double precision[]
    - logregr_irls_step_transition:
         rettype: double precision[]
         argument: double precision[], boolean, double precision[], double precision[]
    - plda_cword_count:
         rettype: integer[]
         argument: mystate integer[], doc integer[], topics integer[], doclen integer, num_topics integer, dsize integer
    - plda_label_document:
         rettype: schema_madlib.plda_topics_t
         argument: doc integer[], global_count integer[], topic_counts integer[], num_topics integer, dsize integer, alpha double precision, eta double precision
    - plda_label_test_documents:
         rettype: void
         argument: test_table text, output_table text, model_table text, dict_table text, num_topics integer, alpha double precision, eta double precision
    - plda_random_topics:
         rettype: schema_madlib.plda_topics_t
         argument: doclen integer, numtopics integer
    - plda_run:
         rettype: void
         argument: datatable text, dicttable text, modeltable text, outputdatatable text, numiter integer, numtopics integer, alpha double precision, eta double precision
    - plda_sample_new_topics:
         rettype: schema_madlib.plda_topics_t
         argument: doc integer[], topics integer[], topic_d integer[], global_count integer[], topic_counts integer[], num_topics integer, dsize integer, alpha double precision, eta double precision
    - plda_sum_int4array:
         rettype: integer[]
         argument: integer[], integer[]
    - plda_topic_word_prob:
         rettype: SETOF schema_madlib.plda_word_weight
         argument: num_topics integer, topic integer, model_table text, dict_table text
    - plda_train:
         rettype: integer
         argument: num_topics integer, num_iter integer, alpha double precision, eta double precision, data_table text, dict_table text, model_table text, output_data_table text
    - plda_word_topic_distrn:
         rettype: integer[]
         argument: arr integer[], ntopics integer, word integer, OUT ret integer[]
    - plda_zero_array:
         rettype: integer[]
         argument: d integer

# Aggregates (UDA) removed from v0.5
# Overloaded functions should be mentioned separately
uda:
    - logregr_irls_step:
         rettype: double precision[]
         argument: boolean, double precision[], double precision[]
    - logregr_igd_step:
         rettype: double precision[]
         argument: boolean, double precision[], double precision[]
    - plda_cword_agg:
         rettype: integer[]
         argument: integer[], integer[], integer, integer, integer
    - plda_sum_int4array_agg:
         rettype: integer[]
         argument: integer[]
    - logregr_cg_step:
        rettype: double precision[]
        argument: boolean, double precision[], double precision[]

# Cast operators (UDC) updated/added in v0.6
udc:
    bool2text:
        sourcetype: boolean
        targettype: text
