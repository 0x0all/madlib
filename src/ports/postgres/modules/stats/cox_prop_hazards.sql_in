/* ----------------------------------------------------------------------- *//**
 *
 * @file cox_prop_hazards.sql_in
 *
 * @brief SQL functions for cox proportional hazards
 * @date July 2012
 *
 * @sa For a brief introduction to cox regression, see the
 *     module description \ref grp_cox_prop_hazards
 *
 *//* ----------------------------------------------------------------------- */

m4_include(`SQLCommon.m4')

/**
@addtogroup grp_cox_prop_hazards

<div class="toc"><b>Contents</b>
<ul>
<li class="level1"><a href="#help">Online Help</a></li>
<li class="level1"><a href="#training">Training Function</a>
<li class="level1"><a href="#examples">Examples</a></li>
<li class="level1"><a href="#background">Technical Background</a></li>
<li class="level1"><a href="#related">Related Topics</a></li>
</ul>
</div>

Proportional-Hazard models enable the comparison of various survival models.
These survival models are functions describing the probability of a one-item
event (prototypically, this event is death) with respect to time.
The interval of time before death occurs is the survival time.
Let T be a random variable representing the survival time,
with a cumulative probability function P(t). Informally, P(t) is
the probability that death has happened before time t.

@anchor help
@par Online Help

To display a brief summary of the Cox Proportional Hazards module, call the \ref coxph() function with no argument:
@verbatim
SELECT madlib.coxph();
@endverbatim


@anchor train
@par Training Function

Following is the syntax for the coxph() training function:
@verbatim
coxph(
    source_table,
    output_table,
    dependent_variable,
    independent_variable,
    right_censoring_status,
    strata,
    optimizer_params
)
@endverbatim
\b Arguments
<dl class="arglist">
<dt>source_table</dt>
<dd>VARCHAR. The name of the table containing input data.</dd>
<dt>output_table</dt>
<dd>VARCHAR. The name of the table where the output model is saved.</dd>
<dt>dependent_variable</dt>
<dd>VARCHAR. A string containing the name of a column that contains
an array of numeric values, or a string expression in the format 'array[1, x1, x2, x3]',
where <em>x1</em>, <em>x2</em> and <em>x3</em> are column names. Dependent
variables refer to the time of death. There is no need to pre-sort the data.</dd>
<dt>independent_variable</dt>
<dd>VARCHAR. The name of the independent variable.</dd>
<dt>right_censoring_status (optional)</dt>
<dd>VARCHAR, default: TRUE for all observations. A string containing an expression that evaluates to the right-censoring status for the observation&mdash;TRUE if the observation is not
censored and FALSE if the observation is censored. The string could contain
the name of the column containing the right-censoring status, a fixed Boolean
expression (i.e., 'true', 'false', '0', '1') that applies to all observations,
or a Boolean expression such as 'column_name < 10' that can be evaluated for each
observation.</dd>
<dt>strata</dt>
<dd>VARCHAR, default: NULL, which does not do any stratifications. It should be a string that contains the column names separated by commas, which are the columns (strata ID variables) used to do stratification.</dd>
<dt>optimizer_params</dt>
<dd>VARCHAR, default: NULL, which uses the default values of optimizer parameters: max_iter=20, optimizer='newton', tolerance=1e-4. It should be a string that contains pairs of 'key=value' separated by commas.</dd>
</dl>

@anchor notes
@par Notes

- All table names can be optionally schema qualified (current_schemas() would be
searched if a schema name is not provided) and all table and column names
should follow case-sensitivity and quoting rules per the database.
(For instance, 'mytable' and 'MyTable' both resolve to the same entity, i.e. 'mytable'.
If mixed-case or multi-byte characters are desired for entity names then the
string should be double-quoted; in this case the input would be '"MyTable"').

- The cox_prop_hazards_regr() function has been deprecated, and
coxph() should be used instead.

@anchor output
@par Output Table

The output is saved in the table named by the <em>output_table</em> argument. It has the following columns:
<dl class="arglist">
<dt>coef</dt>
<dd>FLOAT8[]. Vector of the coefficients.</dd>
<dt>loglikelihood</dt>
<dd>Log-likelihood value</dd>
<dt>std_err</dt>
<dd>FLOAT8[]. Vector of the standard error of the coefficients.</dd>
<dt>z_stats</dt>
<dd>FLOAT8[]. Vector of the statistics of the coefficients.</dd>
<dt>p_values</dt>
<dd>FLOAT8[]. Vector of the p-values of the coefficients.</dd>
<dt>hessian</dt>
<dd>The vectorized Hessian matrix computed using the final solution.</dd>
<dt>iter_num</dt>
<dd>The number of iterations performed by the optimizer</dd>
</dl>

A output summary table is also generated and stored in <em>output_table</em>_summary. It has the following columns:
<dt>source_table</dt>
<dd>Source table name</dd>
<dt>dep_var</dt>
<dd>dependent variable name</dd>
<dt>ind_var</dt>
<dd>independent variable name</dd>
<dt>right_censoring_status</dt>
<dd>The right censoring status</dd>
<dt>strata</dt>
<dd>The stratification columns</dd>

@anchor examples
@examp
-# Create an input data set:
<pre class="example">
DROP TABLE IF EXISTS sample_data;
CREATE TABLE sample_data (
    id INTEGER NOT NULL,
    grp DOUBLE PRECISION,
    wbc DOUBLE PRECISION,
    timedeath INTEGER,
    status BOOLEAN
);
COPY sample_data FROM STDIN DELIMITED BY '|';
  0 |   0 | 1.45 |        35 | t
  1 |   0 | 1.47 |        34 | t
  3 |   0 |  2.2 |        32 | t
  4 |   0 | 1.78 |        25 | t
  5 |   0 | 2.57 |        23 | t
  6 |   0 | 2.32 |        22 | t
  7 |   0 | 2.01 |        20 | t
  8 |   0 | 2.05 |        19 | t
  9 |   0 | 2.16 |        17 | t
 10 |   0 |  3.6 |        16 | t
 11 |   1 |  2.3 |        15 | t
 12 |   0 | 2.88 |        13 | t
 13 |   1 |  1.5 |        12 | t
 14 |   0 |  2.6 |        11 | t
 15 |   0 |  2.7 |        10 | t
 16 |   0 |  2.8 |         9 | t
 17 |   1 | 2.32 |         8 | t
 18 |   0 | 4.43 |         7 | t
 19 |   0 | 2.31 |         6 | t
 20 |   1 | 3.49 |         5 | t
 21 |   1 | 2.42 |         4 | t
 22 |   1 | 4.01 |         3 | t
 23 |   1 | 4.91 |         2 | t
 24 |   1 |    5 |         1 | t
\\.
</pre>
-# Run the cox regression function:
@verbatim
SELECT * FROM madlib.coxph(
    'sample_data',
    'sample_cox',
    'timedeath',
    'ARRAY[grp,wbc]',
    'status');
@endverbatim

-# View the results of the regression:
<pre class="example">
\\x on
SELECT * FROM sample_cox;
</pre>
Results:
<pre class="result">
&nbsp;-[ RECORD 1 ]-----------------------------------------
 coef     | {2.54449137803027,1.67183255057665}
 std_err  | {0.677308807341768,0.387308633304678}
 z_stats  | {3.75676700265663,4.31653830257251}
 p_values | {0.000172122613528057,1.58495189046891e-05}
</pre>

@anchor notes
@par Notes

- Table names can be optionally schema qualified (current_schemas() is
searched if a schema name is not provided) and table and column names
should follow case-sensitivity and quoting rules per the database.
(For instance, 'mytable' and 'MyTable' both resolve to the same entity, i.e. 'mytable'.
If mixed-case or multi-byte characters are desired for entity names then the
string should be double-quoted; in this case the input would be '"MyTable"'.

- The cox_prop_hazards_regr() function has been deprecated, and
cox_prop_hazards() should be used instead.

@anchor background
@par Technical Background

Generally, proportional-hazard models start with a list of \f$ \boldsymbol n \f$ observations,
each with \f$ \boldsymbol m \f$ covariates and a time of death. From this
\f$ \boldsymbol n \times m \f$ matrix, we would like to derive the correlation
between the covariates and the hazard function. This amounts to finding
the parameters \f$ \boldsymbol \beta \f$ that best fit the model described below.

Let us define:
- \f$ \boldsymbol t \in  \mathbf R^{m} \f$ denote the vector of observed dependent
  variables, with \f$ n \f$ rows.
- \f$ X \in \mathbf R^{m} \f$ denote the design matrix with \f$ m \f$
  columns and \f$ n \f$ rows, containing all observed vectors of independent
  variables \f$ \boldsymbol x_i \f$ as rows.
- \f$ R(t_i) \f$ denote the set of observations still alive at time \f$ t_i \f$

Note that this model <b>does not</b> include a <b>constant term</b>, and the data
cannot contain a column of 1s.

By definition,
\f[
    P[T_k = t_i | \boldsymbol R(t_i)]
    =    \frac{e^{\beta^T x_k} }{ \sum_{j \in R(t_i)} e^{\beta^T x_j}}.
    \,.
\f]

The <b>partial likelihood </b>function can now be generated as the product of
conditional probabilities:
\f[
\mathcal L = \prod_{i = 1}^n
                \left(
                \frac{e^{\beta^T x_i}}{ \sum_{j \in R(t_i)} e^{\beta^T x_j}}
                \right).
\f]

The log-likelihood form of this equation is
\f[
L = \sum_{i = 1}^n
                    \left[  \beta^T x_i
                                    - \log\left(\sum_{j \in R(t_i)} e^{\beta^T x_j }\right)
                    \right].
\f]

Using this score function and Hessian matrix, the partial likelihood can be
maximized using the <b> Newton-Raphson algorithm</b>. <b>Breslow's method</b>
is used to resolved tied times of deaths. The time of death for two records are
considered "equal" if they differ by less than 1.0e-6

The inverse of the Hessian matrix, evaluated at the estimate of
\f$ \boldsymbol \beta \f$, can be used as an <b>approximate variance-covariance
matrix </b> for the estimate, and used to produce approximate
<b>standard errors</b> for the regression coefficients.

\f[
    \mathit{se}(c_i) = \left( (H)^{-1} \right)_{ii}
    \,.
\f]
The Wald z-statistic is
\f[
    z_i = \frac{c_i}{\mathit{se}(c_i)}
    \,.
\f]

The Wald \f$ p \f$-value for coefficient \f$ i \f$ gives the probability (under
the assumptions inherent in the Wald test) of seeing a value at least as extreme
as the one observed, provided that the null hypothesis (\f$ c_i = 0 \f$) is
true. Letting \f$ F \f$ denote the cumulative density function of a standard
normal distribution, the Wald \f$ p \f$-value for coefficient \f$ i \f$ is
therefore
\f[
    p_i = \Pr(|Z| \geq |z_i|) = 2 \cdot (1 - F( |z_i| ))
\f]
where \f$ Z \f$ is a standard normally distributed random variable.


The condition number is computed as \f$ \kappa(H) \f$ during the iteration
immediately <em>preceding</em> convergence (i.e., \f$ A \f$ is computed using
the coefficients of the previous iteration). A large condition number (say, more
than 1000) indicates the presence of significant multicollinearity.

@anchor Literature
@literature

A somewhat random selection of nice write-ups, with valuable pointers into
further literature:

[1] John Fox: Cox Proportional-Hazards Regression for Survival Data,
        Appendix to An R and S-PLUS companion to Applied Regression Feb 2012,
    http://cran.r-project.org/doc/contrib/Fox-Companion/appendix-cox-regression.pdf

[2] Stephen J Walters: What is a Cox model?
    http://www.medicine.ox.ac.uk/bandolier/painres/download/whatis/cox_model.pdf

@anchor related
@par Related Topics

File cox_prop_hazards.sql_in documenting the functions


@internal
@sa Namespace cox_prop_hazards
    \ref madlib::modules::stats documenting the implementation in C++
@endinternal

*/

----------------------------------------------------------------------

CREATE OR REPLACE FUNCTION MADLIB_SCHEMA.coxph()
RETURNS VARCHAR AS $$
BEGIN
    RETURN MADLIB_SCHEMA.coxph('');
END;
$$ LANGUAGE plpgsql VOLATILE;

----------------------------------------------------------------------

CREATE OR REPLACE FUNCTION MADLIB_SCHEMA.coxph(
     message VARCHAR     -- usage string
)
RETURNS VARCHAR AS $$
PythonFunction(stats, cox_prop_hazards, coxph_help_message)
$$ LANGUAGE plpythonu VOLATILE;

----------------------------------------------------------------------

/**
  * @brief Cox regresison training function
 **/
CREATE FUNCTION MADLIB_SCHEMA.coxph(
     source_table               VARCHAR     -- name of input  table
   , output_table               VARCHAR     -- name of output table
   , dependent_varname          VARCHAR     -- name of dependent variable
   , independent_varname        VARCHAR     -- name of independent variable
   , right_censoring_status     VARCHAR     -- censoring status
   , strata                     VARCHAR     -- comma separated stratifying column names
   , optimizer_params           VARCHAR     -- a string with parameters separated by comma
  )
RETURNS VOID AS $$
    PythonFunctionBodyOnly(`stats', `cox_prop_hazards')
    cox_prop_hazards.coxph(
        schema_madlib, source_table, output_table, dependent_varname,
        independent_varname, right_censoring_status, strata,
        optimizer_params)
$$ LANGUAGE plpythonu;

----------------------------------------------------------------------

/**
  * @brief Cox regresison training function
 **/
CREATE FUNCTION MADLIB_SCHEMA.coxph(
     source_table           VARCHAR     -- name of input  table
   , output_table           VARCHAR     -- name of output table
   , dependent_variable     VARCHAR     -- name of dependent variable
   , independent_variable   VARCHAR     -- name of independent variable
   , right_censoring_status VARCHAR     -- censored status
   , strata                 VARCHAR     -- stratification column names
  )
RETURNS VOID AS $$
    SELECT MADLIB_SCHEMA.coxph($1, $2, $3, $4, $5, $6, NULL)
$$ LANGUAGE sql VOLATILE;

----------------------------------------------------------------------

/**
  * @brief Cox regresison training function
 **/
CREATE FUNCTION MADLIB_SCHEMA.coxph(
     source_table               VARCHAR       -- name of input  table
   , output_table               VARCHAR       -- name of output table
   , dependent_variable         VARCHAR       -- name of dependent variable
   , independent_variable       VARCHAR       -- name of independent variable
   , right_censoring_status     VARCHAR       -- censored status
  )
RETURNS VOID AS $$
    SELECT MADLIB_SCHEMA.coxph($1, $2, $3, $4, $5, NULL)
$$ LANGUAGE sql VOLATILE;

----------------------------------------------------------------------

/**
  * @brief Cox regresison training function
 **/
CREATE FUNCTION MADLIB_SCHEMA.coxph(
     source_table               VARCHAR       -- name of input  table
   , output_table                  VARCHAR       -- name of output table
   , dependent_variable         VARCHAR       -- name of dependent variable
   , independent_variable       VARCHAR       -- name of independent variable
  )
RETURNS VOID AS $$
    SELECT MADLIB_SCHEMA.coxph($1, $2, $3, $4, 'TRUE')
$$ LANGUAGE sql VOLATILE;

----------------------------------------------------------------------

DROP TYPE IF EXISTS MADLIB_SCHEMA.coxph_result;
CREATE TYPE MADLIB_SCHEMA.coxph_result AS (
    coef DOUBLE PRECISION[],
    logLikelihood DOUBLE PRECISION,
    std_err DOUBLE PRECISION[],
    z_stats DOUBLE PRECISION[],
    p_values DOUBLE PRECISION[],
    hessian DOUBLE PRECISION[]
);

----------------------------------------------------------------------

CREATE OR REPLACE FUNCTION MADLIB_SCHEMA.coxph_step_final(
    state DOUBLE PRECISION[])
RETURNS DOUBLE PRECISION[] AS 'MODULE_PATHNAME'
LANGUAGE C IMMUTABLE STRICT;

------------------------------------

CREATE OR REPLACE FUNCTION MADLIB_SCHEMA.coxph_step_transition(
    /*+  state */ DOUBLE PRECISION[],
    /*+  x */ DOUBLE PRECISION[],
    /*+  y */ DOUBLE PRECISION,
    /*+  status */ BOOLEAN,
    /*+  coef */ DOUBLE PRECISION[]
)
RETURNS DOUBLE PRECISION[] AS 'MODULE_PATHNAME'
LANGUAGE C IMMUTABLE;

------------------------------------

/**
 * @internal
 * @brief Perform one iteration the Newton-Rhapson method.
 */
CREATE
m4_ifdef(`__GREENPLUM__',m4_ifdef(`__HAS_ORDERED_AGGREGATES__',`ORDERED'))
AGGREGATE MADLIB_SCHEMA.coxph_step(
    /*+  x */ DOUBLE PRECISION[],
    /*+  y */ DOUBLE PRECISION,
    /*+  status */ BOOLEAN,
    /*+  coef */ DOUBLE PRECISION[]
)
(
    STYPE=DOUBLE PRECISION[],
    SFUNC=MADLIB_SCHEMA.coxph_step_transition,
    FINALFUNC=MADLIB_SCHEMA.coxph_step_final,
    INITCOND='{0,0,0,0,0,0,0}'
);

----------------------------------------------------------------------

CREATE OR REPLACE FUNCTION MADLIB_SCHEMA.coxph_step_inner_final(
    state DOUBLE PRECISION[])
RETURNS DOUBLE PRECISION[] AS 'MODULE_PATHNAME'
LANGUAGE C IMMUTABLE STRICT;

----------------------------

CREATE
m4_ifdef(`__GREENPLUM__',m4_ifdef(`__HAS_ORDERED_AGGREGATES__',`ORDERED'))
AGGREGATE MADLIB_SCHEMA.coxph_strata_step_inner(
    /*+  x */ DOUBLE PRECISION[],
    /*+  y */ DOUBLE PRECISION,
    /*+  status */ BOOLEAN,
    /*+  coef */ DOUBLE PRECISION[]
)
(
    STYPE=DOUBLE PRECISION[],
    SFUNC=MADLIB_SCHEMA.coxph_step_transition,
    FinalFunc = MADLIB_SCHEMA.coxph_step_inner_final,
    INITCOND='{0,0,0,0,0,0,0}'
);

----------------------------------------------------------------------

CREATE OR REPLACE FUNCTION MADLIB_SCHEMA.coxph_step_outer_transition(
    /*+ state1 */ DOUBLE PRECISION[],
    /*+ state2 */ DOUBLE PRECISION[])
RETURNS DOUBLE PRECISION[] AS 'MODULE_PATHNAME'
LANGUAGE c IMMUTABLE;

------------------------------------

CREATE OR REPLACE FUNCTION MADLIB_SCHEMA.coxph_step_strata_final(
    state DOUBLE PRECISION[])
RETURNS DOUBLE PRECISION[] AS 'MODULE_PATHNAME'
LANGUAGE C IMMUTABLE STRICT;

------------------------------------

CREATE AGGREGATE MADLIB_SCHEMA.coxph_strata_step_outer(
    /*+  state */ DOUBLE PRECISION[]
)
(
    STYPE=DOUBLE PRECISION[],
    SFUNC=MADLIB_SCHEMA.coxph_step_outer_transition,
    FINALFUNC=MADLIB_SCHEMA.coxph_step_strata_final
    m4_ifdef(
        `GREENPLUM', 
        `, prefunc=MADLIB_SCHEMA.coxph_step_outer_transition'
    )
);

----------------------------------------------------------------------

CREATE OR REPLACE FUNCTION MADLIB_SCHEMA.internal_coxph_step_distance(
    /*+ state1 */ DOUBLE PRECISION[],
    /*+ state2 */ DOUBLE PRECISION[])
RETURNS DOUBLE PRECISION AS 'MODULE_PATHNAME'
LANGUAGE c IMMUTABLE STRICT;

----------------------------------------------------------------------

CREATE OR REPLACE FUNCTION MADLIB_SCHEMA.internal_coxph_result(
    /*+ state */ DOUBLE PRECISION[])
RETURNS MADLIB_SCHEMA.coxph_result AS 'MODULE_PATHNAME'
LANGUAGE c IMMUTABLE STRICT;
