--------------------------------------------------------------------------------
-- Linear Regression tests
--------------------------------------------------------------------------------

DROP SCHEMA IF EXISTS madlib_regress_installcheck CASCADE;
CREATE SCHEMA madlib_regress_installcheck;

SET search_path TO madlib_regress_installcheck;

--------------------------------------------------------------------------------
-- Test 1: Random data
--------------------------------------------------------------------------------
-- Creating artificial random data =============================
-- For the model
--   E[y] = logit^(-1) ( x^T * [-2.4, 3.1, 0.6, -1.6, 1.3] )
-- we generate 5000 rows (y, x[]), where each x[i] is a random
-- variate corresponding to normal distribution with mean x[i]
-- and standard deviation 1.

CREATE TABLE artificiallogreg
(
	id SERIAL NOT NULL,
	y BOOLEAN,
	x REAL[]
);

-- Create an array of normally distributed random variates
-- We use the Marsaglia polar method
CREATE OR REPLACE FUNCTION randomNormalArray(n INTEGER)
RETURNS DOUBLE PRECISION[] AS $$
DECLARE
	u DOUBLE PRECISION;
	v DOUBLE PRECISION;
	s DOUBLE PRECISION;
	x DOUBLE PRECISION;
	y DOUBLE PRECISION;
	i INTEGER;
	theArray DOUBLE PRECISION[];
BEGIN
	FOR i IN 1..(n+1)/2 LOOP
		LOOP
			u = random() * 2. - 1.;
			v = random() * 2. - 1.;
			s = u * u + v * v;
			EXIT WHEN s < 1.;
		END LOOP;
		x = u * sqrt(-2. * ln(s) / s);
		y = v * sqrt(-2. * ln(s) / s);

		theArray[2 * i - 1] = x;
		IF 2 * i <= n THEN
			theArray[2 * i] = y;
		END IF;
	END LOOP;
	RETURN theArray;
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION dotProduct(
    vec1 DOUBLE PRECISION[],
    vec2 DOUBLE PRECISION[])
RETURNS DOUBLE PRECISION AS $$
DECLARE
	sum DOUBLE PRECISION;
	dim INTEGER;
	i INTEGER;
BEGIN
	IF array_lower(vec1, 1) != 1 OR array_lower(vec2, 1) != 1 OR
		array_upper(vec1, 1) != array_upper(vec2, 1) THEN
		RETURN NULL;
	END IF;
	dim = array_upper(vec1, 1);
	sum = 0.;
	FOR i in 1..dim LOOP
		sum := sum + vec1[i] * vec2[i];
	END LOOP;
	RETURN sum;
END;
$$ LANGUAGE plpgsql;

CREATE TABLE randomdata AS
SELECT id, randomNormalArray(5)::REAL[] AS x
FROM generate_series(1,5000) AS id;

INSERT INTO artificiallogreg (y, x)
SELECT
	random() < 1. / (1. + exp(-dotProduct(r.x, c.coef))),
	r.x
FROM randomdata AS r, (SELECT array[-2.4, 3.1, 0.6, -1.6, 1.3] AS coef) AS c;

-- Calculate the Log Reg
SELECT MADLIB_SCHEMA.logregr_coef(
	'artificiallogreg', 'y', 'x', 20, 'irls', 0.001
)::REAL[];


--------------------------------------------------------------------------------
-- Test 1: Predicting heart attack
--------------------------------------------------------------------------------
-- The following example is taken from:
-- http://luna.cas.usf.edu/~mbrannic/files/regression/Logistic.html

CREATE TABLE patients (
	id INTEGER NOT NULL,
	second_attack INTEGER,
	treatment INTEGER,
	trait_anxiety INTEGER,
	CONSTRAINT pk_patient PRIMARY key (id)
);

COPY patients (ID, second_attack, treatment, trait_anxiety) FROM stdin;
1	1	1	70
2	1	1	80
3	1	1	50
4	1	0	60
5	1	0	40
6	1	0	65
7	1	0	75
8	1	0	80
9	1	0	70
10	1	0	60
11	0	1	65
12	0	1	50
13	0	1	45
14	0	1	35
15	0	1	40
16	0	1	50
17	0	0	55
18	0	0	45
19	0	0	50
20	0	0	60
\.

CREATE VIEW patients_view AS 
SELECT array[ 1, treatment, trait_anxiety]::float[] AS x, second_attack::boolean AS y
FROM patients;

-- Calculate the Log Reg
SELECT MADLIB_SCHEMA.logregr_coef(
	'patients_view', 'y', 'x', 20, 'irls', 0.001
)::REAL[];