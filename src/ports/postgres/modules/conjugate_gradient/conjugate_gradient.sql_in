/* ----------------------------------------------------------------------- *//** 
 *
 * @file conjugate_gradient.sql_in
 *
 * @brief SQL function computing Conjugate Gradient
 * @date   March 2011
 *
 *
 *//* ----------------------------------------------------------------------- */

/**
@addtogroup grp_cg

@about
This function finds a solution of the function Ax=b where A is a symmetric, positive definite matrix and x and b are vectors. Matrix A is assumed to be stored in a table where each row consists of at least two columns: array containing values of a given row, row number. b is passed as the input to the function. Function return array corresponding to values of x.  

@prereq
None

@usage
Function: <tt>conjugate_gradient('<em>table_name</em>', '<em>name_of_row_values_col</em>', '<em>name_of_row_number_col</em>', '<em>aray_of_b_values<\em>', '<em>desired_precision</em>')</tt>

@sa file conjugate_gradient.sql_in (documenting the SQL function)
*/

/**
 * @brief Compute conjugate gradient
 * 
 * @param table_name name of the table containing argument matrix A
 * @param name_of_row_values_col name of the column contains row values
 * @param name_of_row_num_col name of the column contains row number
 * @param aray_of_b_values array containing values of b
 * @param desired_precision precision threshold after which process will terminate
 * @returns array containing values of x
 *
 */

CREATE OR REPLACE FUNCTION MADLIB_SCHEMA.conjugate_gradient(Matrix TEXT, val_id TEXT, row_id TEXT, b FLOAT[], precision_limit FLOAT, verbosity INT)  RETURNS FLOAT[] AS $$
declare
	r FLOAT[];
	p FLOAT[];
	x FLOAT[];
	k INT;
	iter INT = 0;
	recidual_refresh INT := 30;
	alpha FLOAT;
	r_size FLOAT;
	r_new_size FLOAT;
	Ap FLOAT[];
	Ax FLOAT[];
	pAp_size FLOAT;
	beta FLOAT;
	exit_if_no_progess_in INT := 20;
begin	
	DROP TABLE IF EXISTS X_val;
	CREATE TEMP TABLE X_val(
		value FLOAT[]
	);
	
	DROP TABLE IF EXISTS P_val;
	CREATE TEMP TABLE P_val(
		value FLOAT[]
	); 
	
	SELECT INTO k array_upper(b,1);
	INSERT INTO X_val SELECT ARRAY(SELECT random() FROM generate_series(1, k));
	LOOP
		IF(iter%recidual_refresh = 0)THEN 
			EXECUTE 'SELECT ARRAY(SELECT MADLIB_SCHEMA.array_dot('||val_id||', j.x) FROM (SELECT value AS x FROM X_val) AS j, '|| Matrix ||' ORDER BY '||row_id||' LIMIT '|| k ||')' INTO Ax;
			SELECT INTO r MADLIB_SCHEMA.array_sub(b, Ax);
			SELECT INTO r_size MADLIB_SCHEMA.array_dot(r, r);
			IF(verbosity > 0) THEN
				RAISE INFO 'COMPUTE RESIDUAL ERROR %', r_size;
			END IF;
			SELECT INTO p r; 
		END IF;
		iter = iter + 1;
		TRUNCATE TABLE P_val;
		INSERT INTO P_val VALUES(p);
		EXECUTE 'SELECT ARRAY(SELECT MADLIB_SCHEMA.array_dot('||val_id||', j.p) FROM (SELECT value AS p FROM P_val) AS j,'|| Matrix ||' ORDER BY '||row_id||' LIMIT '|| k ||')' INTO Ap;
		SELECT INTO pAp_size MADLIB_SCHEMA.array_dot(p, Ap);
		alpha = r_size/pAp_size;
		
		SELECT INTO x MADLIB_SCHEMA.array_add(value, MADLIB_SCHEMA.array_scalar_mult(p,alpha)) FROM X_val;
		TRUNCATE TABLE X_val;
		INSERT INTO X_val VALUES(x);
		
		SELECT INTO r MADLIB_SCHEMA.array_add(r,MADLIB_SCHEMA.array_scalar_mult(Ap, -alpha));
		SELECT INTO r_new_size MADLIB_SCHEMA.array_dot(r,r);
		
		IF(verbosity > 0) THEN
			RAISE INFO 'ERROR %',r_new_size; 
		END IF;
		IF (r_new_size < precision_limit) THEN
			EXECUTE 'SELECT ARRAY(SELECT MADLIB_SCHEMA.array_dot('||val_id||', j.x) FROM (SELECT value AS x FROM X_val) AS j, '|| Matrix ||' ORDER BY '||row_id||' LIMIT '|| k ||')' INTO Ax;
			SELECT INTO r MADLIB_SCHEMA.array_sub(b, Ax);
			SELECT INTO r_new_size MADLIB_SCHEMA.array_dot(r, r);
			IF(verbosity > 0) THEN
				RAISE INFO 'TEST FINAL ERROR %', r_new_size;
			END IF;
			IF (r_new_size < precision_limit) THEN
				EXIT;
			END IF;
		END IF;
		SELECT INTO p MADLIB_SCHEMA.array_add(r, MADLIB_SCHEMA.array_scalar_mult(p, r_new_size/r_size));
		IF(r_size < r_new_size) THEN
			exit_if_no_progess_in = exit_if_no_progess_in-1;
			IF(exit_if_no_progess_in <= 0) THEN
				RAISE EXCEPTION 'Algorithm failed to converge. Check is input is positive definate.';
			END IF;
		ELSE
			exit_if_no_progess_in = 20;
		END IF;
		r_size = r_new_size;
	END LOOP; 
	IF(verbosity > 1) THEN
		RETURN ARRAY[r_new_size];
	END IF;
	SELECT INTO x value FROM X_val;
	RETURN x;
end
$$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION MADLIB_SCHEMA.conjugate_gradient(Matrix TEXT, val_id TEXT, row_id TEXT, b FLOAT[], precision_limit FLOAT)  RETURNS FLOAT[] AS $$
declare
begin
	RETURN MADLIB_SCHEMA.conjugate_gradient(Matrix, val_id, row_id, b, precision_limit,0);
end
$$ LANGUAGE plpgsql;
