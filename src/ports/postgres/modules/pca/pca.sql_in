/* ----------------------------------------------------------------------- *//**
 *
 * @file pca.sql_in
 *
 * @brief Principal Component Analysis
 *
 * @sa For a brief introduction to Principal Component Analysis, see the module
 *     description \ref grp_pca.
 *
 *//* ----------------------------------------------------------------------- */

m4_include(`SQLCommon.m4')

/**

@addtogroup grp_pca_train

@about 
\anchor pca_train
Principal component analysis (PCA) is a mathematical procedure that uses an
orthogonal transformation to convert a set of observations of possibly
correlated variables into a set of values of linearly uncorrelated variables
called principal components. This transformation is defined in such a way that
the first principal component has the largest possible variance (i.e.,
accounts for as much of the variability in the data as possible), and each
succeeding component in turn has the highest variance possible under the
constraint that it be orthogonal to (i.e., uncorrelated with) the preceding
components.

See \ref Background for a technical introduction to principal component analysis and implementation notes.


@usage

- Obtaining principal components for dense matrices

<pre>
   SELECT {schema_madlib}.pca_train(
       source_table,           -- Source table name (dense matrix)
       pc_table,               -- Output table name for the principal components
       row_id,                 -- Column name containing the row IDs of the input matrix
       k,                      -- Number of principal components to compute
       -------------- OPTIONAL PARAMETERS --------------
       grouping_cols,          -- Comma-separated list of grouping columns
                               --      (Default: NULL)
       lanczos_iter            -- The number of Lanczos iterations for the SVD calculation
                               --  (Default: minimum of {k+40, smallest matrix dimension})
       use_correlation,        -- If True correlation matrix is used for principal components
                               --      instead of the covariance matrix (Default: False)
       result_summary_table    -- Table name to store summary of results (Default: NULL)
   );
</pre>

- Obtaining principal components for sparse matrices
   <pre>
       SELECT {schema_madlib}.pca_sparse_train(
           source_table,        -- Source table name (sparse matrix)
           pc_table,            -- Output table name for the principal components
           row_id,              -- Name of ‘row_id’ column in sparse matrix representation
           col_id,              -- Name of 'col_id' column in sparse matrix representation
           val_id,              -- Name of 'val_id' column in sparse matrix representation
           row_dim,             -- The number of rows in the sparse matrix
           col_dim,             -- The number of columns in the sparse matrix
           k,                   -- Number of eigenvectors with dominant eigenvalues, sorted decreasingly
           -------------- OPTIONAL PARAMETERS --------------
           grouping_cols,       -- Comma-separated list of grouping columns
                                --  (Default: NULL)
           lanczos_iter         -- The number of Lanczos iterations for the SVD calculation   
                                --  (Default: minimum of {k+40, smallest matrix dimension})
           use_correlation,     -- If True correlation matrix is used for principal components
                                --     instead of the covariance matrix (Default: False)
           result_summary_table -- Table name to store summary of results (Default: NULL)
       );
   </pre>

   <b>Note</b>: Currently <em>grouping_cols</em> is present as a placeholder for forward
   compatibility. The parameter is planned to be implemented as a comma-separated
   list of column names, with the source data grouped using the combination of all the columns.
   An independent PCA model will be computed for each combination of the grouping columns.
   
   <b>Note</b>: Currently <em>use_correlation</em> is also a placeholder for forward
   compatibility. 

The Lanczos iteration number roughly corresponds to the accuracy of the SVD 
calculation, and a higher iteration number corresponds to greater accuracy 
but longer computation time.  The number of iterations must be at least as 
large as the value of <em>k</em>,  but no larger than the smallest dimension
 of the matrix.  If the iteration number is given as zero, then the default
  number of iterations is used.  


The output table is of the form
<pre> 
 row_id |   principal_components | eigen_values     
--------+------------------------+-------------
                   ....
</pre>
where the columns are defined as
<pre> 
    row_id                  INTEGER,   -- ID corresponding to each eigenvalue 
    principal_components    FLOAT8[]   -- Principal component vector for this row_id
    eigen_values            FLOAT8     -- The eigen value for this row
</pre> 

In addition to the output table, a table containing the column means is also generated.  
This table has the same name as the output table, with the string "_mean" appended to the end.  
This table is of the form
<pre> 
 column_mean     
------------
    ....
</pre>
where column_mean is of type FLOAT[].  

If a summary table is created, then it will be of the form
<pre> 
rows_used | exec_time (ms)| iter | recon_error | relative_recon_error | use_correlation 
----------+---------------+------+-------------+----------------------+-----------------
                        ....
</pre>
where the columns are defined as
<pre>
    rows_used            INTEGER,  -- Number of data points in the input
    exec_time (ms)       FLOAT,    -- Number of milliseconds for the PCA calculation to run
    iter                 INTEGER,  -- Number of iterations used in the SVD calculation
    recon_error          FLOAT,    -- The absolute error in the SVD approximation
    relative_recon_error FLOAT,    -- The relative error in the SVD approximation
    use_correlation      BOOL      -- Indicates if the correlation matrix was used
</pre>

@input
The input data matrix should have  \f$ N \f$ rows and \f$ M \f$ columns, where \f$ N \f$ is the number of data points, and \f$ M \f$ is the number of features for each data point.  


The input table for dense PCA is expected to be in the one of the two standard
 MADlib matrix formats.  Either as  
<pre>{TABLE|VIEW} <em>source_table</em> (
    <em>row_id</em> INTEGER,
    row_vec FLOAT8[],
)</pre>
or
<pre>{TABLE|VIEW} <em>source_table</em> (
    <em>row_id</em> INTEGER,
    col1 FLOAT8,
    col2 FLOAT8,
    ...
)</pre>

Note that the column name <em>row_id</em> is taken as an input parameter,
 and should contain a list of row indices (starting at 0) for the input matrix.

The input table for sparse PCA is expected to be in the form:

<pre>{TABLE|VIEW} <em>source_table</em> (
    ...
    <em>row_id</em> INTEGER,
    <em>col_id</em> INTEGER,
    <em>val_id</em> FLOAT8,
    ...
)</pre>

The <em>row_id</em> and <em>col_id</em> columns specify the which entries
 in the matrix are nonzero, and the <em>val_id</em> column defines the values
  of the nonzero entries.  



@examp
-# Create the sample data.
@verbatim
sql> DROP TABLE IF EXISTS mat;
CREATE TABLE mat (
    row_id integer,
    row_vec double precision[]
);

sql> COPY mat (row_id, row_vec) FROM stdin;
0	{1,2,3}
1	{2,1,2}
2	{3,2,1}
\.

@endverbatim
-# Run the PCA function:
@verbatim
sql> drop table result_table; 
sql> select pca_train(
    'mat',              -- name of the input table
    'result_table',     -- name of the output table
    'row_id',           -- column containing the matrix indices
    3                   -- Number of PCA components to compute
);
@endverbatim
-# View the PCA results:
@verbatim
sql> SELECT * from result_table;
 row_id |                     principal_components                     |     eigen_values     
--------+--------------------------------------------------------------+----------------------
      0 | {0.707106781186547,0.408248290459781,-0.577350269192513}     |                    2
      2 | {-0.707106781186547,0.408248290459781,-0.577350269192512}    | 1.26294130828989e-08
      1 | {2.08166817117217e-17,-0.816496580931809,-0.577350269183852} |    0.816496580927726

@endverbatim

\anchor Background 
@background


The PCA implemented here uses an SVD decomposition implementation to recover 
the principle components (as opposed to the directly computing the eigenvectors
 of the covariance matrix).  Let \f$ \boldsymbol X \f$ be the data matrix, and
  let \f$ \hat{x} \f$ be a vector of the column averages of \f$ \boldsymbol{X}\f$.
    PCA computes the matrix \f$ \hat{\boldsymbol X} \f$ as
\f[
\hat{\boldsymbol X} =  {\boldsymbol X} - \vec{e} \hat{x}^T
\f]
where \f$ \vec{e} \f$ is the vector of all ones.  

PCA then computes the SVD matrix factorization
 \f[
\hat{\boldsymbol X} =  {\boldsymbol U}{\boldsymbol \Sigma}{\boldsymbol V}^T
\f]
where \f$ {\boldsymbol \Sigma} \f$ is a diagonal matrix.  The eigenvalues are 
recovered as the entries of \f$ {\boldsymbol \Sigma}/(N-1) \f$, and the principle 
components are the rows of  \f$ {\boldsymbol V} \f$.    


It is important to note that the PCA implementation assumes that the user will
 use only the principle components that have non-zero eigenvalues.  The SVD 
 calculation is done with the Lanczos method, with does not guarantee 
 correctness for singular vectors with zero-valued eigenvalues.  Consequently,
  principle components with zero-valued eigenvalues are not guaranteed to be correct.
 Generally, this will not be problem unless the user wants to use the
 principle components for the entire eigenspectrum.  

@literature

[1] Principal Component Analysis. http://en.wikipedia.org/wiki/Principal_component_analysis

[2] Shlens, Jonathon (2009), A Tutorial on Principal Component Analysis

@sa File pca.sql_in documenting the SQL functions.
**/

-- -----------------------------------------------------------------------
--  PCA for Dense matrices
-- -----------------------------------------------------------------------
/*
@brief Compute principal components for a dense matrix stored in a
        database table
*/
CREATE OR REPLACE FUNCTION
MADLIB_SCHEMA.pca_train(
    source_table          TEXT,    -- Source table name (dense matrix)
    pc_table              TEXT,    -- Output table name for the principal components
    row_id                TEXT,    -- Column name for the ID for each row
    k                     INTEGER, -- Number of principal components to compute
    grouping_cols         TEXT,    -- Comma-separated list of grouping columns (Default: NULL)
    lanczos_iter          INTEGER, -- The number of Lanczos iterations for the SVD calculation (Default: min(k+40, smallest Matrix dimension))
    use_correlation       BOOLEAN, -- If True correlation matrix is used for principal components (Default: False)
    result_summary_table  TEXT     -- Table name to store summary of results (Default: NULL)
)
RETURNS VOID AS $$
PythonFunction(pca, pca, pca)
$$ LANGUAGE plpythonu;

-- Overloaded functions for optional parameters
-- -----------------------------------------------------------------------


CREATE OR REPLACE FUNCTION
MADLIB_SCHEMA.pca_train(
    source_table    TEXT,   -- Source table name (dense matrix)
    pc_table        TEXT,   -- Output table name for the principal components
    row_id          TEXT,   -- Column name for the ID for each row
    k               INTEGER,-- Number of principal components to compute
    grouping_cols   TEXT,   -- Comma-separated list of grouping columns
    lanczos_iter    INTEGER,-- The number of Lanczos iterations for the SVD calculation
    use_correlation BOOLEAN -- If True correlation matrix is used for principal components
)
RETURNS VOID AS $$
    SELECT MADLIB_SCHEMA.pca_train($1, $2, $3, $4, $5, $6, $7, NULL)
$$ LANGUAGE SQL;

CREATE OR REPLACE FUNCTION
MADLIB_SCHEMA.pca_train(
    source_table   TEXT,   -- Source table name (dense matrix)
    pc_table       TEXT,   -- Output table name for the principal components
    row_id         TEXT,   -- Column name for the ID for each row
    k              INTEGER,-- Number of principal components to compute
    grouping_cols  TEXT,   -- Comma-separated list of grouping columns
    lanczos_iter   INTEGER -- The number of Lanczos iterations for the SVD calculation
)
RETURNS VOID AS $$
    SELECT MADLIB_SCHEMA.pca_train($1, $2, $3, $4, $5, $6, False , NULL)
$$ LANGUAGE SQL;

CREATE OR REPLACE FUNCTION
MADLIB_SCHEMA.pca_train(
    source_table   TEXT,   -- Source table name (dense matrix)
    pc_table       TEXT,   -- Output table name for the principal components
    row_id         TEXT,   -- Column name for the ID for each row
    k              INTEGER,-- Number of principal components to compute
    grouping_cols  TEXT    -- Comma-separated list of grouping columns
)
RETURNS VOID AS $$
    SELECT MADLIB_SCHEMA.pca_train($1, $2, $3, $4, $5, 0, False , NULL)
$$ LANGUAGE SQL;


CREATE OR REPLACE FUNCTION
MADLIB_SCHEMA.pca_train(
    source_table   TEXT,   -- Source table name (dense matrix)
    pc_table       TEXT,   -- Output table name for the principal components
    row_id         TEXT,   -- Column name for the ID for each row
    k              INTEGER -- Number of principal components to compute
)
RETURNS VOID AS $$
    SELECT MADLIB_SCHEMA.pca_train($1, $2, $3, $4, NULL, 0, False, NULL)
$$ LANGUAGE SQL;


-- Information Functions
-- -----------------------------------------------------------------------

CREATE OR REPLACE FUNCTION MADLIB_SCHEMA.pca_train(
     usage_string VARCHAR   -- usage string
)
RETURNS TEXT AS $$
PythonFunction(pca, pca, pca_sparse_help_message)
$$ LANGUAGE plpythonu;


CREATE OR REPLACE FUNCTION MADLIB_SCHEMA.pca_train()
RETURNS VARCHAR AS $$
BEGIN
  RETURN MADLIB_SCHEMA.pca_train('');
END;
$$ LANGUAGE plpgsql VOLATILE;

-- -----------------------------------------------------------------------
--  PCA for Sparse matrices
-- -----------------------------------------------------------------------
/*
@brief Compute principal components for a sparse matrix stored in a
        database table
*/
CREATE OR REPLACE FUNCTION
MADLIB_SCHEMA.pca_sparse_train(
    source_table         TEXT,     -- Source table name (dense matrix)
    pc_table             TEXT,     -- Output table name for the principal components
    row_id               TEXT,     -- Name of 'row_id' column in sparse matrix representation
    col_id               TEXT,     -- Name of 'col_id' column in sparse matrix representation
    val_id               TEXT,     -- Name of 'val_id' column in sparse matrix representation
    row_dim              INTEGER,  -- Number of rows in the sparse matrix
    col_dim              INTEGER,  -- Number of columns in the sparse matrix
    k                    INTEGER,  -- Number of eigenvectors with dominant eigenvalues, sorted decreasingly
    grouping_cols        TEXT,     -- Comma-separated list of grouping columns (Default: NULL)
    lanczos_iter         INTEGER,  -- The number of Lanczos iterations for the SVD calculation (Default: min(k+40, smallest Matrix dimension))
    use_correlation      BOOLEAN,  -- If True correlation matrix is used for principal components (Default: False)
    result_summary_table TEXT      -- Table name to store summary of results (Default: NULL)
)
RETURNS VOID AS $$
PythonFunction(pca, pca, pca_sparse)
$$ LANGUAGE plpythonu;


-- Overloaded functions for optional parameters
-- -----------------------------------------------------------------------
CREATE OR REPLACE FUNCTION
MADLIB_SCHEMA.pca_sparse_train(
    source_table    TEXT,     -- Source table name (dense matrix)
    pc_table        TEXT,     -- Output table name for the principal components
    row_id          TEXT,     -- Column name for the ID for each row
    col_id          TEXT,     -- Name of 'col_id' column in sparse matrix representation
    val_id          TEXT,     -- Name of 'val_id' column in sparse matrix representation
    row_dim         INTEGER,  -- Number of rows in the sparse matrix
    col_dim         INTEGER,  -- Number of columns in the sparse matrix
    k               INTEGER,  -- Number of principal components to compute
    grouping_cols   TEXT,     -- Comma-separated list of grouping columns
    lanczos_iter    INTEGER,  -- The number of Lanczos iterations for the SVD calculation
    use_correlation BOOLEAN   -- If True correlation matrix is used for principal components
)
RETURNS VOID AS $$
    SELECT MADLIB_SCHEMA.pca_sparse_train($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, NULL)
$$ LANGUAGE SQL;

CREATE OR REPLACE FUNCTION
MADLIB_SCHEMA.pca_sparse_train(
    source_table  TEXT,     -- Source table name (dense matrix)
    pc_table      TEXT,     -- Output table name for the principal components
    row_id        TEXT,     -- Column name for the ID for each row
    col_id        TEXT,     -- Name of 'col_id' column in sparse matrix representation
    val_id        TEXT,     -- Name of 'val_id' column in sparse matrix representation
    row_dim       INTEGER,  -- Number of rows in the sparse matrix
    col_dim       INTEGER,  -- Number of columns in the sparse matrix
    k             INTEGER,  -- Number of principal components to compute
    grouping_cols TEXT,     -- Comma-separated list of grouping columns
    lanczos_iter  INTEGER   -- The number of Lanczos iterations for the SVD calculation
)
RETURNS VOID AS $$
    SELECT MADLIB_SCHEMA.pca_sparse_train($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, False , NULL)
$$ LANGUAGE SQL;

CREATE OR REPLACE FUNCTION
MADLIB_SCHEMA.pca_sparse_train(
    source_table  TEXT,     -- Source table name (dense matrix)
    pc_table      TEXT,     -- Output table name for the principal components
    row_id        TEXT,     -- Column name for the ID for each row
    col_id        TEXT,     -- Name of 'col_id' column in sparse matrix representation
    val_id        TEXT,     -- Name of 'val_id' column in sparse matrix representation
    row_dim       INTEGER,  -- Number of rows in the sparse matrix
    col_dim       INTEGER,  -- Number of columns in the sparse matrix
    k             INTEGER,  -- Number of principal components to compute
    grouping_cols TEXT      -- Comma-separated list of grouping columns
)
RETURNS VOID AS $$
    SELECT MADLIB_SCHEMA.pca_sparse_train($1, $2, $3, $4, $5, $6, $7, $8, $9, 0, False , NULL)
$$ LANGUAGE SQL;

CREATE OR REPLACE FUNCTION
MADLIB_SCHEMA.pca_sparse_train(
    source_table  TEXT,     -- Source table name (dense matrix)
    pc_table      TEXT,     -- Output table name for the principal components
    row_id        TEXT,     -- Column name for the ID for each row
    col_id        TEXT,     -- Name of 'col_id' column in sparse matrix representation
    val_id        TEXT,     -- Name of 'val_id' column in sparse matrix representation
    row_dim       INTEGER,  -- Number of rows in the sparse matrix
    col_dim       INTEGER,  -- Number of columns in the sparse matrix
    k             INTEGER   -- Number of principal components to compute
)
RETURNS VOID AS $$
    SELECT MADLIB_SCHEMA.pca_sparse_train($1, $2, $3, $4, $5, $6, $7, $8, NULL, 0, False, NULL)
$$ LANGUAGE SQL;


-- -----------------------------------------------------------------------
-- Information Functions
-- -----------------------------------------------------------------------

CREATE OR REPLACE FUNCTION MADLIB_SCHEMA.pca_sparse_train(
     usage_string VARCHAR   -- usage string
)
RETURNS TEXT AS $$
PythonFunction(pca, pca, pca_sparse_help_message)
$$ LANGUAGE plpythonu;


CREATE OR REPLACE FUNCTION MADLIB_SCHEMA.pca_sparse_train()
RETURNS TEXT AS $$
BEGIN
  RETURN MADLIB_SCHEMA.pca_sparse_train('');
END;
$$ LANGUAGE plpgsql VOLATILE;
