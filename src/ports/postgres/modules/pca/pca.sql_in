/* ----------------------------------------------------------------------- *//**
 *
 * @file pca.sql_in
 *
 * @brief Principal Component Analysis
 *
 * @sa For a brief introduction to Principal Component Analysis, see the module
 *     description \ref grp_pca.
 *
 *//* ----------------------------------------------------------------------- */

m4_include(`SQLCommon.m4')

/**
* @addtogroup grp_pca
*
* @brief Principal component analysis (PCA) is a mathematical procedure that uses an
* orthogonal transformation to convert a set of observations of possibly
* correlated variables into a set of values of linearly uncorrelated variables
* called principal components. This transformation is defined in such a way that
* the first principal component has the largest possible variance (i.e.,
* accounts for as much of the variability in the data as possible), and each
* succeeding component in turn has the highest variance possible under the
* constraint that it be orthogonal to (i.e., uncorrelated with) the preceding
* components.
*
* @details
	(Details on Dense and sparse matrix formats)

* @usage
*
* - Obtaining principal components for dense matrices
* 	<pre>
* 		SELECT {schema_madlib}.pca(
* 			source_table, 			-- Source table name (dense matrix)
* 			pc_table, 				-- Output table name for the principal components
* 			row_id, 				-- Column name for the ID for each row
* 			k, 						-- Number of principal components to compute
* 			-------------- OPTIONAL PARAMETERS --------------
* 			grouping_cols, 			-- Comma-separated list of grouping columns
* 									--		(Default: NULL)
* 			use_correlation, 		-- If True correlation matrix is used for principal components
* 									-- 		instead of the covariance matrix (Default: False)
* 			result_summary_table	-- Table name to store summary of results (Default: NULL)
*
* 		);
* 	</pre>
*
* - Obtaining principal component for sparse matrices
* 		<pre>
* 			SELECT {schema_madlib}.pca_sparse(
* 				source_table, 		-- Source table name (dense matrix)
* 				pc_table, 		-- Output table name for the principal components
* 				row_id, 		-- Name of ‘row_id’ column in sparse matrix representation
* 				col_id, 		-- Name of 'col_id' column in sparse matrix representation
* 				val_id, 		-- Name of 'val_id' column in sparse matrix representation
* 				k, 				-- Number of eigenvectors with dominant eigenvalues, sorted decreasingly
* 				-------------- OPTIONAL PARAMETERS --------------
* 				grouping_cols, 		 -- Comma-separated list of grouping columns
* 									 --		(Default: NULL)
* 				use_correlation, 	 -- If True correlation matrix is used for principal components
* 									 -- 	instead of the covariance matrix (Default: False)
* 				result_summary_table -- Table name to store summary of results (Default: NULL)
* 			);
* 		</pre>
*
* 		<b>Note</b>: Currently <em>grouping_cols</em> is present as a placeholder for forward
* 		compatibility. The parameter is planned to implemented as a comma-separated
* 		list of column names, with the source data grouped using the combination
* 		values of the column names. An independent PCA model will be computed
* 		on each value of the combination of the columns.
*
* @input
*
* @output
*
*
* @examples

@literature

[1] Principal Component Analysis. http://en.wikipedia.org/wiki/Principal_component_analysis

[2] Shlens, Jonathon (2009), A Tutorial on Principal Component Analysis

@sa File pca.sql_in documenting the SQL functions.
**/

-- -----------------------------------------------------------------------
-- Main function for PCA (Dense format)
-- -----------------------------------------------------------------------
/*
@brief Compute principal compoents for a dense matrix stored in a
		database table
*/
CREATE OR REPLACE FUNCTION
MADLIB_SCHEMA.pca(
	source_table			TEXT, 		-- Source table name (dense matrix)
	pc_table			 	TEXT, 		-- Output table name for the principal components
	row_id					TEXT, 		-- Column name for the ID for each row
	k						INTEGER, 	-- Number of principal components to compute
	-------------- OPTIONAL PARAMETERS --------------
	grouping_cols			TEXT, 		-- Comma-separated list of grouping columns
										--		(Default: NULL)
	use_correlation			BOOLEAN, 	-- If True correlation matrix is used for principal components
										-- 	instead of the covariance matrix (Default: False)
	result_summary_table	TEXT		-- Table name to store summary of results (Default: NULL)
)
RETURNS VOID AS $$
    PythonFunctionBodyOnly(`pca', `pca')
    return pca.pca(
        schema_madlib, source_table, pc_table,
        row_id, k, grouping_cols, use_correlation, result_summary_table)
$$ LANGUAGE plpythonu;

-- -----------------------------------------------------------------------
-- Main Function for PCA (sparse format)
-- -----------------------------------------------------------------------
/*
@brief Compute principal components for a sparse matrix stored in a
		database table
*/
CREATE OR REPLACE FUNCTION
MADLIB_SCHEMA.pca_sparse(
	source_table			TEXT, 		-- Source table name (dense matrix)
	pc_table			 	TEXT, 		-- Output table name for the principal components
	row_id					TEXT, 		-- Name of ‘row_id’ column in sparse matrix representation
	col_id					TEXT, 		-- Name of 'col_id' column in sparse matrix representation
	val_id					TEXT, 		-- Name of 'val_id' column in sparse matrix representation
	k						INTEGER, 	-- Number of eigenvectors with dominant eigenvalues, sorted decreasingly
	-------------- OPTIONAL PARAMETERS --------------
	grouping_cols			TEXT, 		-- Comma-separated list of grouping columns
										--		(Default: NULL)
	use_correlation			BOOLEAN, 	-- If True correlation matrix is used for principal components
										-- 	instead of the covariance matrix (Default: False)
	result_summary_table	TEXT		-- Table name to store summary of results (Default: NULL)
)
RETURNS VOID AS $$
    PythonFunctionBodyOnly(`pca', `pca')
    return pca.pca_sparse(
        schema_madlib, source_table, pc_table,
        row_id, col_id, val_id, k, grouping_cols, use_correlation, result_summary_table)
$$ LANGUAGE plpythonu;

-- -----------------------------------------------------------------------
-- Overloaded functions for optional parameters
-- -----------------------------------------------------------------------
CREATE OR REPLACE FUNCTION
MADLIB_SCHEMA.pca(
	source_table			TEXT, 		-- Source table name (dense matrix)
	pc_table			 	TEXT, 		-- Output table name for the principal components
	row_id					TEXT, 		-- Column name for the ID for each row
	k						INTEGER, 	-- Number of principal components to compute
	-------------- OPTIONAL PARAMETERS --------------
	grouping_cols			TEXT, 		-- Comma-separated list of grouping columns
										--		(Default: NULL)
	use_correlation			BOOLEAN, 	-- If True correlation matrix is used for principal components
										-- 	instead of the covariance matrix (Default: False)
)
RETURNS VOID AS $$
    SELECT MADLIB_SCHEMA.pca($1, $2, $3, $4, $5, $6, NULL)
$$ LANGUAGE SQL;

CREATE OR REPLACE FUNCTION
MADLIB_SCHEMA.pca(
	source_table			TEXT, 		-- Source table name (dense matrix)
	pc_table			 	TEXT, 		-- Output table name for the principal components
	row_id					TEXT, 		-- Column name for the ID for each row
	k						INTEGER, 	-- Number of principal components to compute
	-------------- OPTIONAL PARAMETERS --------------
	grouping_cols			TEXT, 		-- Comma-separated list of grouping columns
										--		(Default: NULL)
)
RETURNS VOID AS $$
    SELECT MADLIB_SCHEMA.pca($1, $2, $3, $4, $5, False, NULL)
$$ LANGUAGE SQL;

CREATE OR REPLACE FUNCTION
MADLIB_SCHEMA.pca(
	source_table			TEXT, 		-- Source table name (dense matrix)
	pc_table			 	TEXT, 		-- Output table name for the principal components
	row_id					TEXT, 		-- Column name for the ID for each row
	k						INTEGER, 	-- Number of principal components to compute
)
RETURNS VOID AS $$
    SELECT MADLIB_SCHEMA.pca($1, $2, $3, $4, NULL, False, NULL)
$$ LANGUAGE SQL;
-------------------------------------------------------------------------

CREATE OR REPLACE FUNCTION
MADLIB_SCHEMA.pca_sparse(
	source_table			TEXT, 		-- Source table name (dense matrix)
	pc_table			 	TEXT, 		-- Output table name for the principal components
	row_id					TEXT, 		-- Name of ‘row_id’ column in sparse matrix representation
	col_id					TEXT, 		-- Name of 'col_id' column in sparse matrix representation
	val_id					TEXT, 		-- Name of 'val_id' column in sparse matrix representation
	k						INTEGER, 	-- Number of eigenvectors with dominant eigenvalues, sorted decreasingly
	-------------- OPTIONAL PARAMETERS --------------
	grouping_cols			TEXT, 		-- Comma-separated list of grouping columns
										--		(Default: NULL)
	use_correlation			BOOLEAN, 	-- If True correlation matrix is used for principal components
										-- 	instead of the covariance matrix (Default: False)
)
RETURNS VOID AS $$
	SELECT MADLIB_SCHEMA.pca_sparse($1, $2, $3, $4, $5, $6, $7, $8, NULL)
$$ LANGUAGE SQL;


CREATE OR REPLACE FUNCTION
MADLIB_SCHEMA.pca_sparse(
	source_table			TEXT, 		-- Source table name (dense matrix)
	pc_table			 	TEXT, 		-- Output table name for the principal components
	row_id					TEXT, 		-- Name of ‘row_id’ column in sparse matrix representation
	col_id					TEXT, 		-- Name of 'col_id' column in sparse matrix representation
	val_id					TEXT, 		-- Name of 'val_id' column in sparse matrix representation
	k						INTEGER, 	-- Number of eigenvectors with dominant eigenvalues, sorted decreasingly
	-------------- OPTIONAL PARAMETERS --------------
	grouping_cols			TEXT, 		-- Comma-separated list of grouping columns
										--		(Default: NULL)
)
RETURNS VOID AS $$
	SELECT MADLIB_SCHEMA.pca_sparse($1, $2, $3, $4, $5, $6, $7, False, NULL)
$$ LANGUAGE SQL;


CREATE OR REPLACE FUNCTION
MADLIB_SCHEMA.pca_sparse(
	source_table			TEXT, 		-- Source table name (dense matrix)
	pc_table			 	TEXT, 		-- Output table name for the principal components
	row_id					TEXT, 		-- Name of ‘row_id’ column in sparse matrix representation
	col_id					TEXT, 		-- Name of 'col_id' column in sparse matrix representation
	val_id					TEXT, 		-- Name of 'val_id' column in sparse matrix representation
	k						INTEGER, 	-- Number of eigenvectors with dominant eigenvalues, sorted decreasingly
)
RETURNS VOID AS $$
	SELECT MADLIB_SCHEMA.pca_sparse($1, $2, $3, $4, $5, $6, NULL, False, NULL)
$$ LANGUAGE SQL;
-------------------------------------------------------------------------