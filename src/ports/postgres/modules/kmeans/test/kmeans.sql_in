---------------------------------------------------------------------------
-- Rules: 
-- ------
-- Any DB objects should be created w/o schema prefix,
-- since this file is executed in a separate schema context.
---------------------------------------------------------------------------

---------------------------------------------------------------------------
-- Setup: 
---------------------------------------------------------------------------
SELECT setseed( extract( epoch from current_timestamp)-floor( extract( epoch from current_timestamp)));

DROP TABLE IF EXISTS km_testdata;
CREATE TABLE km_testdata as 
SELECT
    m.m * 1000000 + cid as pid, array[ round(x + random()::numeric*15,2), round(y + random()::numeric*15,2)]::float[]::svec as position
FROM
    (
    SELECT
        round( random()::numeric * 100, 2) as x
        , round( random()::numeric * 100, 2) as y
        , x.x as cid
    FROM
        (SELECT generate_series(1,20) x) x -- number of planned centroids
    ) xy
    , (SELECT generate_series(1,100) m) as m -- nr of points per cluster
DISTRIBUTED BY (pid);

---------------------------------------------------------------
-- Test
---------------------------------------------------------------
-- Create a test table
--SELECT create_test_table( 'km_testdata', 1000, 10, 20, 0.1);
-- Run k-means 
SELECT * FROM MADLIB_SCHEMA.kmeans( 
    'km_testdata', 'position', 'pid'
    , 20, False
    , 'km_points', 'km_centroids', True
    , True
);

SELECT cid, count(*) FROM km_points GROUP BY 1;

-- Try a view with FLOAT[]
CREATE VIEW km_testdata_float123 AS SELECT position::float[] FROM km_testdata;
-- Rerun 
SELECT * FROM MADLIB_SCHEMA.kmeans( 
    'km_testdata_float123', 'position', null
    , 20, False
    , 'km_points', 'km_centroids', True
    , True
);

SELECT cid, count(*) FROM km_points GROUP BY 1;