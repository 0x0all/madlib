/* ----------------------------------------------------------------------- *//** 
 *
 * @file profile.sql_in
 *
 * @brief SQL function for single-pass table profiles
 * @date   January 2011
 *
 * @sa For a brief introduction to "profiles", see the module
 *     description grp_profile. Cf. also the module grp_sketches.
 *
 *//* ----------------------------------------------------------------------- */

m4_include(`SQLCommon.m4')

/**
@addtogroup grp_profile


@about
This module computes a "profile" of a table or view: a configurable set of 
aggregates to be run on each column of a table.

Because the input schema of the table or view is unknown, we need to synthesize 
SQL to suit. This is done either via the <c>profile</c> or <c>profile_full</c> UDF.  

@prereq
Requires MADlib sketch module, which provides single-pass approximations of various descriptive statistics.

@usage
Function: <strong><tt>profile( '<em>input_table</em>')</tt></strong> 

Generates a basic profile information (subset of predefined aggregate functions) for all columns of a table.

Parameters:
    - <em>input_table</em> :      fully qualified table name, e.g.: pg_catalog.pg_tables

Example:
\code
SQL> SELECT * FROM madlib.profile( 'pg_catalog.pg_tables');
\endcode

Function: <strong><tt>profile_full( '<em>input_table</em>', '<em>buckets</em>')</tt></strong> 
 
Generates a full profile information (all predefined aggregate functions) for all columns of a table.

Parameters:
    - <em>input_table</em> :      fully qualified table name, e.g.: pg_catalog.pg_tables
    - <em>buckets</em> :      number of buckets for histogram related functions
    
Example:
\code
SQL> SELECT * FROM madlib.profile_full( 'pg_catalog.pg_tables', 10);
\endcode

@sa file profile.sql_in for SQL functions' signatures
*/

/**
 * @brief Return Type
 *
 */
CREATE TYPE MADLIB_SCHEMA.profile_result AS (
      schema_name TEXT
    , table_name  TEXT
    , column_name TEXT
    , function    TEXT
    , value       TEXT
);

/**
 * @brief Compute a simple "profile" of a table or view
 *
 * @param input_table table name to analyze
 * @return Set of profile_result rows
 */
CREATE OR REPLACE FUNCTION MADLIB_SCHEMA.profile( input_table text)
  RETURNS SETOF MADLIB_SCHEMA.profile_result
AS $$

    PythonFunctionBodyOnly(`data_profile', `profile')
    
    # MADlibSchema comes from PythonFunctionBodyOnly
    return profile.profile( MADlibSchema, input_table, 'bas', None);

$$ LANGUAGE plpythonu;

/**
 * @brief Compute a full "profile" of a table or view
 *
 * @param input_table table name to analyze
 * @param buckets number of buckets for histogram functions
 * @return Set of profile_result rows
 */
CREATE OR REPLACE FUNCTION MADLIB_SCHEMA.profile_full( input_table text, buckets integer)
  RETURNS SETOF MADLIB_SCHEMA.profile_result
AS $$

    PythonFunctionBodyOnly(`data_profile', `profile')
    
    # MADlibSchema comes from PythonFunctionBodyOnly
    return profile.profile( MADlibSchema, input_table, 'all', buckets);

$$ LANGUAGE plpythonu;
